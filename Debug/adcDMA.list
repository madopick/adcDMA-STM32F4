
adcDMA.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002948  080001ac  080001ac  000101ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000020  08002af4  08002af4  00012af4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002b14  08002b14  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08002b14  08002b14  00012b14  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002b1c  08002b1c  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002b1c  08002b1c  00012b1c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002b20  08002b20  00012b20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08002b24  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0002000c  2**0
                  CONTENTS
 10 .bss          0000010c  2000000c  2000000c  0002000c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000118  20000118  0002000c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a664  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000196b  00000000  00000000  0002a6a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000818  00000000  00000000  0002c010  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000780  00000000  00000000  0002c828  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023275  00000000  00000000  0002cfa8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000a33b  00000000  00000000  0005021d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da38f  00000000  00000000  0005a558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  001348e7  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002028  00000000  00000000  0013493c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	; (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	; (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	2000000c 	.word	0x2000000c
 80001c8:	00000000 	.word	0x00000000
 80001cc:	08002adc 	.word	0x08002adc

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	; (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	; (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	; (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	20000010 	.word	0x20000010
 80001e8:	08002adc 	.word	0x08002adc

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b96e 	b.w	80004e0 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	4604      	mov	r4, r0
 8000224:	468c      	mov	ip, r1
 8000226:	2b00      	cmp	r3, #0
 8000228:	f040 8083 	bne.w	8000332 <__udivmoddi4+0x116>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d947      	bls.n	80002c2 <__udivmoddi4+0xa6>
 8000232:	fab2 f282 	clz	r2, r2
 8000236:	b142      	cbz	r2, 800024a <__udivmoddi4+0x2e>
 8000238:	f1c2 0020 	rsb	r0, r2, #32
 800023c:	fa24 f000 	lsr.w	r0, r4, r0
 8000240:	4091      	lsls	r1, r2
 8000242:	4097      	lsls	r7, r2
 8000244:	ea40 0c01 	orr.w	ip, r0, r1
 8000248:	4094      	lsls	r4, r2
 800024a:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800024e:	0c23      	lsrs	r3, r4, #16
 8000250:	fbbc f6f8 	udiv	r6, ip, r8
 8000254:	fa1f fe87 	uxth.w	lr, r7
 8000258:	fb08 c116 	mls	r1, r8, r6, ip
 800025c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000260:	fb06 f10e 	mul.w	r1, r6, lr
 8000264:	4299      	cmp	r1, r3
 8000266:	d909      	bls.n	800027c <__udivmoddi4+0x60>
 8000268:	18fb      	adds	r3, r7, r3
 800026a:	f106 30ff 	add.w	r0, r6, #4294967295
 800026e:	f080 8119 	bcs.w	80004a4 <__udivmoddi4+0x288>
 8000272:	4299      	cmp	r1, r3
 8000274:	f240 8116 	bls.w	80004a4 <__udivmoddi4+0x288>
 8000278:	3e02      	subs	r6, #2
 800027a:	443b      	add	r3, r7
 800027c:	1a5b      	subs	r3, r3, r1
 800027e:	b2a4      	uxth	r4, r4
 8000280:	fbb3 f0f8 	udiv	r0, r3, r8
 8000284:	fb08 3310 	mls	r3, r8, r0, r3
 8000288:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800028c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000290:	45a6      	cmp	lr, r4
 8000292:	d909      	bls.n	80002a8 <__udivmoddi4+0x8c>
 8000294:	193c      	adds	r4, r7, r4
 8000296:	f100 33ff 	add.w	r3, r0, #4294967295
 800029a:	f080 8105 	bcs.w	80004a8 <__udivmoddi4+0x28c>
 800029e:	45a6      	cmp	lr, r4
 80002a0:	f240 8102 	bls.w	80004a8 <__udivmoddi4+0x28c>
 80002a4:	3802      	subs	r0, #2
 80002a6:	443c      	add	r4, r7
 80002a8:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002ac:	eba4 040e 	sub.w	r4, r4, lr
 80002b0:	2600      	movs	r6, #0
 80002b2:	b11d      	cbz	r5, 80002bc <__udivmoddi4+0xa0>
 80002b4:	40d4      	lsrs	r4, r2
 80002b6:	2300      	movs	r3, #0
 80002b8:	e9c5 4300 	strd	r4, r3, [r5]
 80002bc:	4631      	mov	r1, r6
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	b902      	cbnz	r2, 80002c6 <__udivmoddi4+0xaa>
 80002c4:	deff      	udf	#255	; 0xff
 80002c6:	fab2 f282 	clz	r2, r2
 80002ca:	2a00      	cmp	r2, #0
 80002cc:	d150      	bne.n	8000370 <__udivmoddi4+0x154>
 80002ce:	1bcb      	subs	r3, r1, r7
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f f887 	uxth.w	r8, r7
 80002d8:	2601      	movs	r6, #1
 80002da:	fbb3 fcfe 	udiv	ip, r3, lr
 80002de:	0c21      	lsrs	r1, r4, #16
 80002e0:	fb0e 331c 	mls	r3, lr, ip, r3
 80002e4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002e8:	fb08 f30c 	mul.w	r3, r8, ip
 80002ec:	428b      	cmp	r3, r1
 80002ee:	d907      	bls.n	8000300 <__udivmoddi4+0xe4>
 80002f0:	1879      	adds	r1, r7, r1
 80002f2:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002f6:	d202      	bcs.n	80002fe <__udivmoddi4+0xe2>
 80002f8:	428b      	cmp	r3, r1
 80002fa:	f200 80e9 	bhi.w	80004d0 <__udivmoddi4+0x2b4>
 80002fe:	4684      	mov	ip, r0
 8000300:	1ac9      	subs	r1, r1, r3
 8000302:	b2a3      	uxth	r3, r4
 8000304:	fbb1 f0fe 	udiv	r0, r1, lr
 8000308:	fb0e 1110 	mls	r1, lr, r0, r1
 800030c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000310:	fb08 f800 	mul.w	r8, r8, r0
 8000314:	45a0      	cmp	r8, r4
 8000316:	d907      	bls.n	8000328 <__udivmoddi4+0x10c>
 8000318:	193c      	adds	r4, r7, r4
 800031a:	f100 33ff 	add.w	r3, r0, #4294967295
 800031e:	d202      	bcs.n	8000326 <__udivmoddi4+0x10a>
 8000320:	45a0      	cmp	r8, r4
 8000322:	f200 80d9 	bhi.w	80004d8 <__udivmoddi4+0x2bc>
 8000326:	4618      	mov	r0, r3
 8000328:	eba4 0408 	sub.w	r4, r4, r8
 800032c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000330:	e7bf      	b.n	80002b2 <__udivmoddi4+0x96>
 8000332:	428b      	cmp	r3, r1
 8000334:	d909      	bls.n	800034a <__udivmoddi4+0x12e>
 8000336:	2d00      	cmp	r5, #0
 8000338:	f000 80b1 	beq.w	800049e <__udivmoddi4+0x282>
 800033c:	2600      	movs	r6, #0
 800033e:	e9c5 0100 	strd	r0, r1, [r5]
 8000342:	4630      	mov	r0, r6
 8000344:	4631      	mov	r1, r6
 8000346:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800034a:	fab3 f683 	clz	r6, r3
 800034e:	2e00      	cmp	r6, #0
 8000350:	d14a      	bne.n	80003e8 <__udivmoddi4+0x1cc>
 8000352:	428b      	cmp	r3, r1
 8000354:	d302      	bcc.n	800035c <__udivmoddi4+0x140>
 8000356:	4282      	cmp	r2, r0
 8000358:	f200 80b8 	bhi.w	80004cc <__udivmoddi4+0x2b0>
 800035c:	1a84      	subs	r4, r0, r2
 800035e:	eb61 0103 	sbc.w	r1, r1, r3
 8000362:	2001      	movs	r0, #1
 8000364:	468c      	mov	ip, r1
 8000366:	2d00      	cmp	r5, #0
 8000368:	d0a8      	beq.n	80002bc <__udivmoddi4+0xa0>
 800036a:	e9c5 4c00 	strd	r4, ip, [r5]
 800036e:	e7a5      	b.n	80002bc <__udivmoddi4+0xa0>
 8000370:	f1c2 0320 	rsb	r3, r2, #32
 8000374:	fa20 f603 	lsr.w	r6, r0, r3
 8000378:	4097      	lsls	r7, r2
 800037a:	fa01 f002 	lsl.w	r0, r1, r2
 800037e:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000382:	40d9      	lsrs	r1, r3
 8000384:	4330      	orrs	r0, r6
 8000386:	0c03      	lsrs	r3, r0, #16
 8000388:	fbb1 f6fe 	udiv	r6, r1, lr
 800038c:	fa1f f887 	uxth.w	r8, r7
 8000390:	fb0e 1116 	mls	r1, lr, r6, r1
 8000394:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000398:	fb06 f108 	mul.w	r1, r6, r8
 800039c:	4299      	cmp	r1, r3
 800039e:	fa04 f402 	lsl.w	r4, r4, r2
 80003a2:	d909      	bls.n	80003b8 <__udivmoddi4+0x19c>
 80003a4:	18fb      	adds	r3, r7, r3
 80003a6:	f106 3cff 	add.w	ip, r6, #4294967295
 80003aa:	f080 808d 	bcs.w	80004c8 <__udivmoddi4+0x2ac>
 80003ae:	4299      	cmp	r1, r3
 80003b0:	f240 808a 	bls.w	80004c8 <__udivmoddi4+0x2ac>
 80003b4:	3e02      	subs	r6, #2
 80003b6:	443b      	add	r3, r7
 80003b8:	1a5b      	subs	r3, r3, r1
 80003ba:	b281      	uxth	r1, r0
 80003bc:	fbb3 f0fe 	udiv	r0, r3, lr
 80003c0:	fb0e 3310 	mls	r3, lr, r0, r3
 80003c4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003c8:	fb00 f308 	mul.w	r3, r0, r8
 80003cc:	428b      	cmp	r3, r1
 80003ce:	d907      	bls.n	80003e0 <__udivmoddi4+0x1c4>
 80003d0:	1879      	adds	r1, r7, r1
 80003d2:	f100 3cff 	add.w	ip, r0, #4294967295
 80003d6:	d273      	bcs.n	80004c0 <__udivmoddi4+0x2a4>
 80003d8:	428b      	cmp	r3, r1
 80003da:	d971      	bls.n	80004c0 <__udivmoddi4+0x2a4>
 80003dc:	3802      	subs	r0, #2
 80003de:	4439      	add	r1, r7
 80003e0:	1acb      	subs	r3, r1, r3
 80003e2:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003e6:	e778      	b.n	80002da <__udivmoddi4+0xbe>
 80003e8:	f1c6 0c20 	rsb	ip, r6, #32
 80003ec:	fa03 f406 	lsl.w	r4, r3, r6
 80003f0:	fa22 f30c 	lsr.w	r3, r2, ip
 80003f4:	431c      	orrs	r4, r3
 80003f6:	fa20 f70c 	lsr.w	r7, r0, ip
 80003fa:	fa01 f306 	lsl.w	r3, r1, r6
 80003fe:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000402:	fa21 f10c 	lsr.w	r1, r1, ip
 8000406:	431f      	orrs	r7, r3
 8000408:	0c3b      	lsrs	r3, r7, #16
 800040a:	fbb1 f9fe 	udiv	r9, r1, lr
 800040e:	fa1f f884 	uxth.w	r8, r4
 8000412:	fb0e 1119 	mls	r1, lr, r9, r1
 8000416:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 800041a:	fb09 fa08 	mul.w	sl, r9, r8
 800041e:	458a      	cmp	sl, r1
 8000420:	fa02 f206 	lsl.w	r2, r2, r6
 8000424:	fa00 f306 	lsl.w	r3, r0, r6
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x220>
 800042a:	1861      	adds	r1, r4, r1
 800042c:	f109 30ff 	add.w	r0, r9, #4294967295
 8000430:	d248      	bcs.n	80004c4 <__udivmoddi4+0x2a8>
 8000432:	458a      	cmp	sl, r1
 8000434:	d946      	bls.n	80004c4 <__udivmoddi4+0x2a8>
 8000436:	f1a9 0902 	sub.w	r9, r9, #2
 800043a:	4421      	add	r1, r4
 800043c:	eba1 010a 	sub.w	r1, r1, sl
 8000440:	b2bf      	uxth	r7, r7
 8000442:	fbb1 f0fe 	udiv	r0, r1, lr
 8000446:	fb0e 1110 	mls	r1, lr, r0, r1
 800044a:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800044e:	fb00 f808 	mul.w	r8, r0, r8
 8000452:	45b8      	cmp	r8, r7
 8000454:	d907      	bls.n	8000466 <__udivmoddi4+0x24a>
 8000456:	19e7      	adds	r7, r4, r7
 8000458:	f100 31ff 	add.w	r1, r0, #4294967295
 800045c:	d22e      	bcs.n	80004bc <__udivmoddi4+0x2a0>
 800045e:	45b8      	cmp	r8, r7
 8000460:	d92c      	bls.n	80004bc <__udivmoddi4+0x2a0>
 8000462:	3802      	subs	r0, #2
 8000464:	4427      	add	r7, r4
 8000466:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800046a:	eba7 0708 	sub.w	r7, r7, r8
 800046e:	fba0 8902 	umull	r8, r9, r0, r2
 8000472:	454f      	cmp	r7, r9
 8000474:	46c6      	mov	lr, r8
 8000476:	4649      	mov	r1, r9
 8000478:	d31a      	bcc.n	80004b0 <__udivmoddi4+0x294>
 800047a:	d017      	beq.n	80004ac <__udivmoddi4+0x290>
 800047c:	b15d      	cbz	r5, 8000496 <__udivmoddi4+0x27a>
 800047e:	ebb3 020e 	subs.w	r2, r3, lr
 8000482:	eb67 0701 	sbc.w	r7, r7, r1
 8000486:	fa07 fc0c 	lsl.w	ip, r7, ip
 800048a:	40f2      	lsrs	r2, r6
 800048c:	ea4c 0202 	orr.w	r2, ip, r2
 8000490:	40f7      	lsrs	r7, r6
 8000492:	e9c5 2700 	strd	r2, r7, [r5]
 8000496:	2600      	movs	r6, #0
 8000498:	4631      	mov	r1, r6
 800049a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800049e:	462e      	mov	r6, r5
 80004a0:	4628      	mov	r0, r5
 80004a2:	e70b      	b.n	80002bc <__udivmoddi4+0xa0>
 80004a4:	4606      	mov	r6, r0
 80004a6:	e6e9      	b.n	800027c <__udivmoddi4+0x60>
 80004a8:	4618      	mov	r0, r3
 80004aa:	e6fd      	b.n	80002a8 <__udivmoddi4+0x8c>
 80004ac:	4543      	cmp	r3, r8
 80004ae:	d2e5      	bcs.n	800047c <__udivmoddi4+0x260>
 80004b0:	ebb8 0e02 	subs.w	lr, r8, r2
 80004b4:	eb69 0104 	sbc.w	r1, r9, r4
 80004b8:	3801      	subs	r0, #1
 80004ba:	e7df      	b.n	800047c <__udivmoddi4+0x260>
 80004bc:	4608      	mov	r0, r1
 80004be:	e7d2      	b.n	8000466 <__udivmoddi4+0x24a>
 80004c0:	4660      	mov	r0, ip
 80004c2:	e78d      	b.n	80003e0 <__udivmoddi4+0x1c4>
 80004c4:	4681      	mov	r9, r0
 80004c6:	e7b9      	b.n	800043c <__udivmoddi4+0x220>
 80004c8:	4666      	mov	r6, ip
 80004ca:	e775      	b.n	80003b8 <__udivmoddi4+0x19c>
 80004cc:	4630      	mov	r0, r6
 80004ce:	e74a      	b.n	8000366 <__udivmoddi4+0x14a>
 80004d0:	f1ac 0c02 	sub.w	ip, ip, #2
 80004d4:	4439      	add	r1, r7
 80004d6:	e713      	b.n	8000300 <__udivmoddi4+0xe4>
 80004d8:	3802      	subs	r0, #2
 80004da:	443c      	add	r4, r7
 80004dc:	e724      	b.n	8000328 <__udivmoddi4+0x10c>
 80004de:	bf00      	nop

080004e0 <__aeabi_idiv0>:
 80004e0:	4770      	bx	lr
 80004e2:	bf00      	nop

080004e4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	af00      	add	r7, sp, #0
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004e8:	f000 fb0e 	bl	8000b08 <HAL_Init>

  /* Configure the system clock */
  SystemClock_Config();
 80004ec:	f000 f814 	bl	8000518 <SystemClock_Config>

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f0:	f000 f920 	bl	8000734 <MX_GPIO_Init>
  MX_DMA_Init();
 80004f4:	f000 f8fe 	bl	80006f4 <MX_DMA_Init>
  MX_ADC1_Init();
 80004f8:	f000 f880 	bl	80005fc <MX_ADC1_Init>
  MX_USART3_UART_Init();
 80004fc:	f000 f8d0 	bl	80006a0 <MX_USART3_UART_Init>

  /* Infinite loop */
  while (1)
  {
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000500:	2101      	movs	r1, #1
 8000502:	4804      	ldr	r0, [pc, #16]	; (8000514 <main+0x30>)
 8000504:	f001 fbc9 	bl	8001c9a <HAL_GPIO_TogglePin>
	  HAL_Delay(1000);
 8000508:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800050c:	f000 fb6e 	bl	8000bec <HAL_Delay>
	  HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 8000510:	e7f6      	b.n	8000500 <main+0x1c>
 8000512:	bf00      	nop
 8000514:	40020400 	.word	0x40020400

08000518 <SystemClock_Config>:
  *            Flash Latency(WS)              = 5
  * @param  None
  * @retval None
  */
void SystemClock_Config(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b094      	sub	sp, #80	; 0x50
 800051c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800051e:	f107 0320 	add.w	r3, r7, #32
 8000522:	2230      	movs	r2, #48	; 0x30
 8000524:	2100      	movs	r1, #0
 8000526:	4618      	mov	r0, r3
 8000528:	f002 fad0 	bl	8002acc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800052c:	f107 030c 	add.w	r3, r7, #12
 8000530:	2200      	movs	r2, #0
 8000532:	601a      	str	r2, [r3, #0]
 8000534:	605a      	str	r2, [r3, #4]
 8000536:	609a      	str	r2, [r3, #8]
 8000538:	60da      	str	r2, [r3, #12]
 800053a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage*/
  __HAL_RCC_PWR_CLK_ENABLE();
 800053c:	2300      	movs	r3, #0
 800053e:	60bb      	str	r3, [r7, #8]
 8000540:	4b2c      	ldr	r3, [pc, #176]	; (80005f4 <SystemClock_Config+0xdc>)
 8000542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000544:	4a2b      	ldr	r2, [pc, #172]	; (80005f4 <SystemClock_Config+0xdc>)
 8000546:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800054a:	6413      	str	r3, [r2, #64]	; 0x40
 800054c:	4b29      	ldr	r3, [pc, #164]	; (80005f4 <SystemClock_Config+0xdc>)
 800054e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000550:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000554:	60bb      	str	r3, [r7, #8]
 8000556:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000558:	2300      	movs	r3, #0
 800055a:	607b      	str	r3, [r7, #4]
 800055c:	4b26      	ldr	r3, [pc, #152]	; (80005f8 <SystemClock_Config+0xe0>)
 800055e:	681b      	ldr	r3, [r3, #0]
 8000560:	4a25      	ldr	r2, [pc, #148]	; (80005f8 <SystemClock_Config+0xe0>)
 8000562:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000566:	6013      	str	r3, [r2, #0]
 8000568:	4b23      	ldr	r3, [pc, #140]	; (80005f8 <SystemClock_Config+0xe0>)
 800056a:	681b      	ldr	r3, [r3, #0]
 800056c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000570:	607b      	str	r3, [r7, #4]
 8000572:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters in the RCC_OscInitTypeDef structure.*/
  RCC_OscInitStruct.OscillatorType 	= RCC_OSCILLATORTYPE_HSE;
 8000574:	2301      	movs	r3, #1
 8000576:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState 		= RCC_HSE_BYPASS;
 8000578:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800057c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState 	= RCC_PLL_ON;
 800057e:	2302      	movs	r3, #2
 8000580:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource 	= RCC_PLLSOURCE_HSE;
 8000582:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000586:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM 		= 8;
 8000588:	2308      	movs	r3, #8
 800058a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN 		= 360;
 800058c:	f44f 73b4 	mov.w	r3, #360	; 0x168
 8000590:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP 		= RCC_PLLP_DIV2;
 8000592:	2302      	movs	r3, #2
 8000594:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ 		= 7;
 8000596:	2307      	movs	r3, #7
 8000598:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800059a:	f107 0320 	add.w	r3, r7, #32
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fbe6 	bl	8001d70 <HAL_RCC_OscConfig>
 80005a4:	4603      	mov	r3, r0
 80005a6:	2b00      	cmp	r3, #0
 80005a8:	d001      	beq.n	80005ae <SystemClock_Config+0x96>
  {
    Error_Handler();
 80005aa:	f000 f94f 	bl	800084c <Error_Handler>
  }

  /** Activate the Over-Drive mode*/
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80005ae:	f001 fb8f 	bl	8001cd0 <HAL_PWREx_EnableOverDrive>
 80005b2:	4603      	mov	r3, r0
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d001      	beq.n	80005bc <SystemClock_Config+0xa4>
  {
    Error_Handler();
 80005b8:	f000 f948 	bl	800084c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks*/
  RCC_ClkInitStruct.ClockType 		= RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
 80005bc:	230f      	movs	r3, #15
 80005be:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.SYSCLKSource 	= RCC_SYSCLKSOURCE_PLLCLK;
 80005c0:	2302      	movs	r3, #2
 80005c2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider 	= RCC_SYSCLK_DIV1;
 80005c4:	2300      	movs	r3, #0
 80005c6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider 	= RCC_HCLK_DIV4;
 80005c8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80005cc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider 	= RCC_HCLK_DIV2;
 80005ce:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005d2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80005d4:	f107 030c 	add.w	r3, r7, #12
 80005d8:	2105      	movs	r1, #5
 80005da:	4618      	mov	r0, r3
 80005dc:	f001 fe40 	bl	8002260 <HAL_RCC_ClockConfig>
 80005e0:	4603      	mov	r3, r0
 80005e2:	2b00      	cmp	r3, #0
 80005e4:	d001      	beq.n	80005ea <SystemClock_Config+0xd2>
  {
    Error_Handler();
 80005e6:	f000 f931 	bl	800084c <Error_Handler>
  }
}
 80005ea:	bf00      	nop
 80005ec:	3750      	adds	r7, #80	; 0x50
 80005ee:	46bd      	mov	sp, r7
 80005f0:	bd80      	pop	{r7, pc}
 80005f2:	bf00      	nop
 80005f4:	40023800 	.word	0x40023800
 80005f8:	40007000 	.word	0x40007000

080005fc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80005fc:	b580      	push	{r7, lr}
 80005fe:	b084      	sub	sp, #16
 8000600:	af00      	add	r7, sp, #0
  ADC_ChannelConfTypeDef sConfig = {0};
 8000602:	463b      	mov	r3, r7
 8000604:	2200      	movs	r2, #0
 8000606:	601a      	str	r2, [r3, #0]
 8000608:	605a      	str	r2, [r3, #4]
 800060a:	609a      	str	r2, [r3, #8]
 800060c:	60da      	str	r2, [r3, #12]

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)*/
  hadc1.Instance 					= ADC1;
 800060e:	4b21      	ldr	r3, [pc, #132]	; (8000694 <MX_ADC1_Init+0x98>)
 8000610:	4a21      	ldr	r2, [pc, #132]	; (8000698 <MX_ADC1_Init+0x9c>)
 8000612:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler 		= ADC_CLOCK_SYNC_PCLK_DIV4;
 8000614:	4b1f      	ldr	r3, [pc, #124]	; (8000694 <MX_ADC1_Init+0x98>)
 8000616:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800061a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution 			= ADC_RESOLUTION_12B;
 800061c:	4b1d      	ldr	r3, [pc, #116]	; (8000694 <MX_ADC1_Init+0x98>)
 800061e:	2200      	movs	r2, #0
 8000620:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode 			= DISABLE;				/* Sequencer disabled (ADC conversion on only 1 channel: channel set on rank 1) */
 8000622:	4b1c      	ldr	r3, [pc, #112]	; (8000694 <MX_ADC1_Init+0x98>)
 8000624:	2200      	movs	r2, #0
 8000626:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode 	= DISABLE;				/* Continuous mode disabled to have only 1 conversion at each conversion trig */
 8000628:	4b1a      	ldr	r3, [pc, #104]	; (8000694 <MX_ADC1_Init+0x98>)
 800062a:	2200      	movs	r2, #0
 800062c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode 	= DISABLE;				/* Parameter discarded because sequencer is disabled */
 800062e:	4b19      	ldr	r3, [pc, #100]	; (8000694 <MX_ADC1_Init+0x98>)
 8000630:	2200      	movs	r2, #0
 8000632:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge 	= ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000636:	4b17      	ldr	r3, [pc, #92]	; (8000694 <MX_ADC1_Init+0x98>)
 8000638:	2200      	movs	r2, #0
 800063a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv 		= ADC_SOFTWARE_START;
 800063c:	4b15      	ldr	r3, [pc, #84]	; (8000694 <MX_ADC1_Init+0x98>)
 800063e:	4a17      	ldr	r2, [pc, #92]	; (800069c <MX_ADC1_Init+0xa0>)
 8000640:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign 				= ADC_DATAALIGN_RIGHT;
 8000642:	4b14      	ldr	r3, [pc, #80]	; (8000694 <MX_ADC1_Init+0x98>)
 8000644:	2200      	movs	r2, #0
 8000646:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion 		= 1;
 8000648:	4b12      	ldr	r3, [pc, #72]	; (8000694 <MX_ADC1_Init+0x98>)
 800064a:	2201      	movs	r2, #1
 800064c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests 	= DISABLE;
 800064e:	4b11      	ldr	r3, [pc, #68]	; (8000694 <MX_ADC1_Init+0x98>)
 8000650:	2200      	movs	r2, #0
 8000652:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection 			= ADC_EOC_SINGLE_CONV;
 8000656:	4b0f      	ldr	r3, [pc, #60]	; (8000694 <MX_ADC1_Init+0x98>)
 8000658:	2201      	movs	r2, #1
 800065a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800065c:	480d      	ldr	r0, [pc, #52]	; (8000694 <MX_ADC1_Init+0x98>)
 800065e:	f000 fae9 	bl	8000c34 <HAL_ADC_Init>
 8000662:	4603      	mov	r3, r0
 8000664:	2b00      	cmp	r3, #0
 8000666:	d001      	beq.n	800066c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000668:	f000 f8f0 	bl	800084c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.*/
  sConfig.Channel 					= ADC_CHANNEL_10;
 800066c:	230a      	movs	r3, #10
 800066e:	603b      	str	r3, [r7, #0]
  sConfig.Rank 						= 1;
 8000670:	2301      	movs	r3, #1
 8000672:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime 				= ADC_SAMPLETIME_3CYCLES;
 8000674:	2300      	movs	r3, #0
 8000676:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000678:	463b      	mov	r3, r7
 800067a:	4619      	mov	r1, r3
 800067c:	4805      	ldr	r0, [pc, #20]	; (8000694 <MX_ADC1_Init+0x98>)
 800067e:	f000 fb1d 	bl	8000cbc <HAL_ADC_ConfigChannel>
 8000682:	4603      	mov	r3, r0
 8000684:	2b00      	cmp	r3, #0
 8000686:	d001      	beq.n	800068c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000688:	f000 f8e0 	bl	800084c <Error_Handler>
  }

}
 800068c:	bf00      	nop
 800068e:	3710      	adds	r7, #16
 8000690:	46bd      	mov	sp, r7
 8000692:	bd80      	pop	{r7, pc}
 8000694:	2000006c 	.word	0x2000006c
 8000698:	40012000 	.word	0x40012000
 800069c:	0f000001 	.word	0x0f000001

080006a0 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a0:	b580      	push	{r7, lr}
 80006a2:	af00      	add	r7, sp, #0
  huart3.Instance 			= USART3;
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006a6:	4a12      	ldr	r2, [pc, #72]	; (80006f0 <MX_USART3_UART_Init+0x50>)
 80006a8:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate 		= 115200;
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006ac:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b0:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength 	= UART_WORDLENGTH_8B;
 80006b2:	4b0e      	ldr	r3, [pc, #56]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006b4:	2200      	movs	r2, #0
 80006b6:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits 		= UART_STOPBITS_1;
 80006b8:	4b0c      	ldr	r3, [pc, #48]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006ba:	2200      	movs	r2, #0
 80006bc:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity 		= UART_PARITY_NONE;
 80006be:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006c0:	2200      	movs	r2, #0
 80006c2:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode 			= UART_MODE_TX_RX;
 80006c4:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006c6:	220c      	movs	r2, #12
 80006c8:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl 	= UART_HWCONTROL_NONE;
 80006ca:	4b08      	ldr	r3, [pc, #32]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006cc:	2200      	movs	r2, #0
 80006ce:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling 	= UART_OVERSAMPLING_16;
 80006d0:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006d6:	4805      	ldr	r0, [pc, #20]	; (80006ec <MX_USART3_UART_Init+0x4c>)
 80006d8:	f001 ffbe 	bl	8002658 <HAL_UART_Init>
 80006dc:	4603      	mov	r3, r0
 80006de:	2b00      	cmp	r3, #0
 80006e0:	d001      	beq.n	80006e6 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80006e2:	f000 f8b3 	bl	800084c <Error_Handler>
  }
}
 80006e6:	bf00      	nop
 80006e8:	bd80      	pop	{r7, pc}
 80006ea:	bf00      	nop
 80006ec:	20000028 	.word	0x20000028
 80006f0:	40004800 	.word	0x40004800

080006f4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 80006fa:	2300      	movs	r3, #0
 80006fc:	607b      	str	r3, [r7, #4]
 80006fe:	4b0c      	ldr	r3, [pc, #48]	; (8000730 <MX_DMA_Init+0x3c>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000702:	4a0b      	ldr	r2, [pc, #44]	; (8000730 <MX_DMA_Init+0x3c>)
 8000704:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000708:	6313      	str	r3, [r2, #48]	; 0x30
 800070a:	4b09      	ldr	r3, [pc, #36]	; (8000730 <MX_DMA_Init+0x3c>)
 800070c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800070e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000712:	607b      	str	r3, [r7, #4]
 8000714:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000716:	2200      	movs	r2, #0
 8000718:	2100      	movs	r1, #0
 800071a:	2038      	movs	r0, #56	; 0x38
 800071c:	f000 fdd7 	bl	80012ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000720:	2038      	movs	r0, #56	; 0x38
 8000722:	f000 fdf0 	bl	8001306 <HAL_NVIC_EnableIRQ>

}
 8000726:	bf00      	nop
 8000728:	3708      	adds	r7, #8
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800

08000734 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000734:	b580      	push	{r7, lr}
 8000736:	b08c      	sub	sp, #48	; 0x30
 8000738:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800073a:	f107 031c 	add.w	r3, r7, #28
 800073e:	2200      	movs	r2, #0
 8000740:	601a      	str	r2, [r3, #0]
 8000742:	605a      	str	r2, [r3, #4]
 8000744:	609a      	str	r2, [r3, #8]
 8000746:	60da      	str	r2, [r3, #12]
 8000748:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800074a:	2300      	movs	r3, #0
 800074c:	61bb      	str	r3, [r7, #24]
 800074e:	4b3c      	ldr	r3, [pc, #240]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000752:	4a3b      	ldr	r2, [pc, #236]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000754:	f043 0304 	orr.w	r3, r3, #4
 8000758:	6313      	str	r3, [r2, #48]	; 0x30
 800075a:	4b39      	ldr	r3, [pc, #228]	; (8000840 <MX_GPIO_Init+0x10c>)
 800075c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800075e:	f003 0304 	and.w	r3, r3, #4
 8000762:	61bb      	str	r3, [r7, #24]
 8000764:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000766:	2300      	movs	r3, #0
 8000768:	617b      	str	r3, [r7, #20]
 800076a:	4b35      	ldr	r3, [pc, #212]	; (8000840 <MX_GPIO_Init+0x10c>)
 800076c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800076e:	4a34      	ldr	r2, [pc, #208]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000770:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000774:	6313      	str	r3, [r2, #48]	; 0x30
 8000776:	4b32      	ldr	r3, [pc, #200]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800077e:	617b      	str	r3, [r7, #20]
 8000780:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000782:	2300      	movs	r3, #0
 8000784:	613b      	str	r3, [r7, #16]
 8000786:	4b2e      	ldr	r3, [pc, #184]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	4a2d      	ldr	r2, [pc, #180]	; (8000840 <MX_GPIO_Init+0x10c>)
 800078c:	f043 0302 	orr.w	r3, r3, #2
 8000790:	6313      	str	r3, [r2, #48]	; 0x30
 8000792:	4b2b      	ldr	r3, [pc, #172]	; (8000840 <MX_GPIO_Init+0x10c>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	f003 0302 	and.w	r3, r3, #2
 800079a:	613b      	str	r3, [r7, #16]
 800079c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800079e:	2300      	movs	r3, #0
 80007a0:	60fb      	str	r3, [r7, #12]
 80007a2:	4b27      	ldr	r3, [pc, #156]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a6:	4a26      	ldr	r2, [pc, #152]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007a8:	f043 0308 	orr.w	r3, r3, #8
 80007ac:	6313      	str	r3, [r2, #48]	; 0x30
 80007ae:	4b24      	ldr	r3, [pc, #144]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007b2:	f003 0308 	and.w	r3, r3, #8
 80007b6:	60fb      	str	r3, [r7, #12]
 80007b8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007ba:	2300      	movs	r3, #0
 80007bc:	60bb      	str	r3, [r7, #8]
 80007be:	4b20      	ldr	r3, [pc, #128]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c2:	4a1f      	ldr	r2, [pc, #124]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007c4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007c8:	6313      	str	r3, [r2, #48]	; 0x30
 80007ca:	4b1d      	ldr	r3, [pc, #116]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80007d2:	60bb      	str	r3, [r7, #8]
 80007d4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007d6:	2300      	movs	r3, #0
 80007d8:	607b      	str	r3, [r7, #4]
 80007da:	4b19      	ldr	r3, [pc, #100]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a18      	ldr	r2, [pc, #96]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007e0:	f043 0301 	orr.w	r3, r3, #1
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <MX_GPIO_Init+0x10c>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0301 	and.w	r3, r3, #1
 80007ee:	607b      	str	r3, [r7, #4]
 80007f0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin 	= USER_Btn_Pin;
 80007f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80007f6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_IT_RISING;
 80007f8:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80007fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 80007fe:	2300      	movs	r3, #0
 8000800:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 8000802:	f107 031c 	add.w	r3, r7, #28
 8000806:	4619      	mov	r1, r3
 8000808:	480e      	ldr	r0, [pc, #56]	; (8000844 <MX_GPIO_Init+0x110>)
 800080a:	f001 f881 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin 	= LD1_Pin|LD3_Pin|LD2_Pin;
 800080e:	f244 0381 	movw	r3, #16513	; 0x4081
 8000812:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode 	= GPIO_MODE_OUTPUT_PP;
 8000814:	2301      	movs	r3, #1
 8000816:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull 	= GPIO_NOPULL;
 8000818:	2300      	movs	r3, #0
 800081a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800081c:	2300      	movs	r3, #0
 800081e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000820:	f107 031c 	add.w	r3, r7, #28
 8000824:	4619      	mov	r1, r3
 8000826:	4808      	ldr	r0, [pc, #32]	; (8000848 <MX_GPIO_Init+0x114>)
 8000828:	f001 f872 	bl	8001910 <HAL_GPIO_Init>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800082c:	2200      	movs	r2, #0
 800082e:	f244 0181 	movw	r1, #16513	; 0x4081
 8000832:	4805      	ldr	r0, [pc, #20]	; (8000848 <MX_GPIO_Init+0x114>)
 8000834:	f001 fa18 	bl	8001c68 <HAL_GPIO_WritePin>
}
 8000838:	bf00      	nop
 800083a:	3730      	adds	r7, #48	; 0x30
 800083c:	46bd      	mov	sp, r7
 800083e:	bd80      	pop	{r7, pc}
 8000840:	40023800 	.word	0x40023800
 8000844:	40020800 	.word	0x40020800
 8000848:	40020400 	.word	0x40020400

0800084c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800084c:	b480      	push	{r7}
 800084e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000850:	b672      	cpsid	i
}
 8000852:	bf00      	nop
  __disable_irq();
  while (1)
 8000854:	e7fe      	b.n	8000854 <Error_Handler+0x8>
	...

08000858 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000858:	b480      	push	{r7}
 800085a:	b083      	sub	sp, #12
 800085c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800085e:	2300      	movs	r3, #0
 8000860:	607b      	str	r3, [r7, #4]
 8000862:	4b10      	ldr	r3, [pc, #64]	; (80008a4 <HAL_MspInit+0x4c>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a0f      	ldr	r2, [pc, #60]	; (80008a4 <HAL_MspInit+0x4c>)
 8000868:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b0d      	ldr	r3, [pc, #52]	; (80008a4 <HAL_MspInit+0x4c>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000876:	607b      	str	r3, [r7, #4]
 8000878:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800087a:	2300      	movs	r3, #0
 800087c:	603b      	str	r3, [r7, #0]
 800087e:	4b09      	ldr	r3, [pc, #36]	; (80008a4 <HAL_MspInit+0x4c>)
 8000880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000882:	4a08      	ldr	r2, [pc, #32]	; (80008a4 <HAL_MspInit+0x4c>)
 8000884:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000888:	6413      	str	r3, [r2, #64]	; 0x40
 800088a:	4b06      	ldr	r3, [pc, #24]	; (80008a4 <HAL_MspInit+0x4c>)
 800088c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800088e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000892:	603b      	str	r3, [r7, #0]
 8000894:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000896:	bf00      	nop
 8000898:	370c      	adds	r7, #12
 800089a:	46bd      	mov	sp, r7
 800089c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008a0:	4770      	bx	lr
 80008a2:	bf00      	nop
 80008a4:	40023800 	.word	0x40023800

080008a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008a8:	b580      	push	{r7, lr}
 80008aa:	b08a      	sub	sp, #40	; 0x28
 80008ac:	af00      	add	r7, sp, #0
 80008ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008b0:	f107 0314 	add.w	r3, r7, #20
 80008b4:	2200      	movs	r2, #0
 80008b6:	601a      	str	r2, [r3, #0]
 80008b8:	605a      	str	r2, [r3, #4]
 80008ba:	609a      	str	r2, [r3, #8]
 80008bc:	60da      	str	r2, [r3, #12]
 80008be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	4a2f      	ldr	r2, [pc, #188]	; (8000984 <HAL_ADC_MspInit+0xdc>)
 80008c6:	4293      	cmp	r3, r2
 80008c8:	d157      	bne.n	800097a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80008ca:	2300      	movs	r3, #0
 80008cc:	613b      	str	r3, [r7, #16]
 80008ce:	4b2e      	ldr	r3, [pc, #184]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008d2:	4a2d      	ldr	r2, [pc, #180]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80008d8:	6453      	str	r3, [r2, #68]	; 0x44
 80008da:	4b2b      	ldr	r3, [pc, #172]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80008de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80008e2:	613b      	str	r3, [r7, #16]
 80008e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80008e6:	2300      	movs	r3, #0
 80008e8:	60fb      	str	r3, [r7, #12]
 80008ea:	4b27      	ldr	r3, [pc, #156]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ee:	4a26      	ldr	r2, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008f0:	f043 0304 	orr.w	r3, r3, #4
 80008f4:	6313      	str	r3, [r2, #48]	; 0x30
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0xe0>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	f003 0304 	and.w	r3, r3, #4
 80008fe:	60fb      	str	r3, [r7, #12]
 8000900:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000902:	2301      	movs	r3, #1
 8000904:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000906:	2303      	movs	r3, #3
 8000908:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800090a:	2300      	movs	r3, #0
 800090c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800090e:	f107 0314 	add.w	r3, r7, #20
 8000912:	4619      	mov	r1, r3
 8000914:	481d      	ldr	r0, [pc, #116]	; (800098c <HAL_ADC_MspInit+0xe4>)
 8000916:	f000 fffb 	bl	8001910 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800091a:	4b1d      	ldr	r3, [pc, #116]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800091c:	4a1d      	ldr	r2, [pc, #116]	; (8000994 <HAL_ADC_MspInit+0xec>)
 800091e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000920:	4b1b      	ldr	r3, [pc, #108]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000922:	2200      	movs	r2, #0
 8000924:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000926:	4b1a      	ldr	r3, [pc, #104]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000928:	2200      	movs	r2, #0
 800092a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800092c:	4b18      	ldr	r3, [pc, #96]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800092e:	2200      	movs	r2, #0
 8000930:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000932:	4b17      	ldr	r3, [pc, #92]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000934:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000938:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800093a:	4b15      	ldr	r3, [pc, #84]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800093c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000940:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000942:	4b13      	ldr	r3, [pc, #76]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000944:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000948:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800094a:	4b11      	ldr	r3, [pc, #68]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800094c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000950:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000952:	4b0f      	ldr	r3, [pc, #60]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000954:	2200      	movs	r2, #0
 8000956:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000958:	4b0d      	ldr	r3, [pc, #52]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 800095a:	2200      	movs	r2, #0
 800095c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000960:	f000 fcec 	bl	800133c <HAL_DMA_Init>
 8000964:	4603      	mov	r3, r0
 8000966:	2b00      	cmp	r3, #0
 8000968:	d001      	beq.n	800096e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800096a:	f7ff ff6f 	bl	800084c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4a07      	ldr	r2, [pc, #28]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000972:	639a      	str	r2, [r3, #56]	; 0x38
 8000974:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_ADC_MspInit+0xe8>)
 8000976:	687b      	ldr	r3, [r7, #4]
 8000978:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800097a:	bf00      	nop
 800097c:	3728      	adds	r7, #40	; 0x28
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	40012000 	.word	0x40012000
 8000988:	40023800 	.word	0x40023800
 800098c:	40020800 	.word	0x40020800
 8000990:	200000b4 	.word	0x200000b4
 8000994:	40026410 	.word	0x40026410

08000998 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000998:	b580      	push	{r7, lr}
 800099a:	b08a      	sub	sp, #40	; 0x28
 800099c:	af00      	add	r7, sp, #0
 800099e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	2200      	movs	r2, #0
 80009a6:	601a      	str	r2, [r3, #0]
 80009a8:	605a      	str	r2, [r3, #4]
 80009aa:	609a      	str	r2, [r3, #8]
 80009ac:	60da      	str	r2, [r3, #12]
 80009ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80009b0:	687b      	ldr	r3, [r7, #4]
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	4a19      	ldr	r2, [pc, #100]	; (8000a1c <HAL_UART_MspInit+0x84>)
 80009b6:	4293      	cmp	r3, r2
 80009b8:	d12c      	bne.n	8000a14 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009ba:	2300      	movs	r3, #0
 80009bc:	613b      	str	r3, [r7, #16]
 80009be:	4b18      	ldr	r3, [pc, #96]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009c2:	4a17      	ldr	r2, [pc, #92]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009c8:	6413      	str	r3, [r2, #64]	; 0x40
 80009ca:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009ce:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009d2:	613b      	str	r3, [r7, #16]
 80009d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009d6:	2300      	movs	r3, #0
 80009d8:	60fb      	str	r3, [r7, #12]
 80009da:	4b11      	ldr	r3, [pc, #68]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009de:	4a10      	ldr	r2, [pc, #64]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009e0:	f043 0308 	orr.w	r3, r3, #8
 80009e4:	6313      	str	r3, [r2, #48]	; 0x30
 80009e6:	4b0e      	ldr	r3, [pc, #56]	; (8000a20 <HAL_UART_MspInit+0x88>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	f003 0308 	and.w	r3, r3, #8
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009f2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009f8:	2302      	movs	r3, #2
 80009fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fc:	2300      	movs	r3, #0
 80009fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a00:	2303      	movs	r3, #3
 8000a02:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000a04:	2307      	movs	r3, #7
 8000a06:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4805      	ldr	r0, [pc, #20]	; (8000a24 <HAL_UART_MspInit+0x8c>)
 8000a10:	f000 ff7e 	bl	8001910 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a14:	bf00      	nop
 8000a16:	3728      	adds	r7, #40	; 0x28
 8000a18:	46bd      	mov	sp, r7
 8000a1a:	bd80      	pop	{r7, pc}
 8000a1c:	40004800 	.word	0x40004800
 8000a20:	40023800 	.word	0x40023800
 8000a24:	40020c00 	.word	0x40020c00

08000a28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000a28:	b480      	push	{r7}
 8000a2a:	af00      	add	r7, sp, #0
  while (1)
 8000a2c:	e7fe      	b.n	8000a2c <NMI_Handler+0x4>

08000a2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000a2e:	b480      	push	{r7}
 8000a30:	af00      	add	r7, sp, #0
  while (1)
 8000a32:	e7fe      	b.n	8000a32 <HardFault_Handler+0x4>

08000a34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000a34:	b480      	push	{r7}
 8000a36:	af00      	add	r7, sp, #0
  while (1)
 8000a38:	e7fe      	b.n	8000a38 <MemManage_Handler+0x4>

08000a3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000a3a:	b480      	push	{r7}
 8000a3c:	af00      	add	r7, sp, #0
  while (1)
 8000a3e:	e7fe      	b.n	8000a3e <BusFault_Handler+0x4>

08000a40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000a40:	b480      	push	{r7}
 8000a42:	af00      	add	r7, sp, #0

  while (1)
 8000a44:	e7fe      	b.n	8000a44 <UsageFault_Handler+0x4>

08000a46 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000a46:	b480      	push	{r7}
 8000a48:	af00      	add	r7, sp, #0

}
 8000a4a:	bf00      	nop
 8000a4c:	46bd      	mov	sp, r7
 8000a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a52:	4770      	bx	lr

08000a54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000a54:	b480      	push	{r7}
 8000a56:	af00      	add	r7, sp, #0

}
 8000a58:	bf00      	nop
 8000a5a:	46bd      	mov	sp, r7
 8000a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a60:	4770      	bx	lr

08000a62 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000a62:	b480      	push	{r7}
 8000a64:	af00      	add	r7, sp, #0

}
 8000a66:	bf00      	nop
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a6e:	4770      	bx	lr

08000a70 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  HAL_IncTick();
 8000a74:	f000 f89a 	bl	8000bac <HAL_IncTick>
}
 8000a78:	bf00      	nop
 8000a7a:	bd80      	pop	{r7, pc}

08000a7c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	af00      	add	r7, sp, #0
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000a80:	4802      	ldr	r0, [pc, #8]	; (8000a8c <DMA2_Stream0_IRQHandler+0x10>)
 8000a82:	f000 fd09 	bl	8001498 <HAL_DMA_IRQHandler>
}
 8000a86:	bf00      	nop
 8000a88:	bd80      	pop	{r7, pc}
 8000a8a:	bf00      	nop
 8000a8c:	200000b4 	.word	0x200000b4

08000a90 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000a90:	b480      	push	{r7}
 8000a92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000a94:	4b06      	ldr	r3, [pc, #24]	; (8000ab0 <SystemInit+0x20>)
 8000a96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000a9a:	4a05      	ldr	r2, [pc, #20]	; (8000ab0 <SystemInit+0x20>)
 8000a9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000aa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000aa4:	bf00      	nop
 8000aa6:	46bd      	mov	sp, r7
 8000aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aac:	4770      	bx	lr
 8000aae:	bf00      	nop
 8000ab0:	e000ed00 	.word	0xe000ed00

08000ab4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000ab4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000aec <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ab8:	480d      	ldr	r0, [pc, #52]	; (8000af0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000aba:	490e      	ldr	r1, [pc, #56]	; (8000af4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000abc:	4a0e      	ldr	r2, [pc, #56]	; (8000af8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000abe:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ac0:	e002      	b.n	8000ac8 <LoopCopyDataInit>

08000ac2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ac2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000ac4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000ac6:	3304      	adds	r3, #4

08000ac8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000ac8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000aca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000acc:	d3f9      	bcc.n	8000ac2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000ace:	4a0b      	ldr	r2, [pc, #44]	; (8000afc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000ad0:	4c0b      	ldr	r4, [pc, #44]	; (8000b00 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000ad2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000ad4:	e001      	b.n	8000ada <LoopFillZerobss>

08000ad6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000ad6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000ad8:	3204      	adds	r2, #4

08000ada <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000ada:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000adc:	d3fb      	bcc.n	8000ad6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8000ade:	f7ff ffd7 	bl	8000a90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000ae2:	f001 ffcf 	bl	8002a84 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000ae6:	f7ff fcfd 	bl	80004e4 <main>
  bx  lr    
 8000aea:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000aec:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000af0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000af4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000af8:	08002b24 	.word	0x08002b24
  ldr r2, =_sbss
 8000afc:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b00:	20000118 	.word	0x20000118

08000b04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000b04:	e7fe      	b.n	8000b04 <ADC_IRQHandler>
	...

08000b08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000b0c:	4b0e      	ldr	r3, [pc, #56]	; (8000b48 <HAL_Init+0x40>)
 8000b0e:	681b      	ldr	r3, [r3, #0]
 8000b10:	4a0d      	ldr	r2, [pc, #52]	; (8000b48 <HAL_Init+0x40>)
 8000b12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000b16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000b18:	4b0b      	ldr	r3, [pc, #44]	; (8000b48 <HAL_Init+0x40>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	4a0a      	ldr	r2, [pc, #40]	; (8000b48 <HAL_Init+0x40>)
 8000b1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000b22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <HAL_Init+0x40>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	4a07      	ldr	r2, [pc, #28]	; (8000b48 <HAL_Init+0x40>)
 8000b2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000b30:	2003      	movs	r0, #3
 8000b32:	f000 fbc1 	bl	80012b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000b36:	2000      	movs	r0, #0
 8000b38:	f000 f808 	bl	8000b4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000b3c:	f7ff fe8c 	bl	8000858 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000b40:	2300      	movs	r3, #0
}
 8000b42:	4618      	mov	r0, r3
 8000b44:	bd80      	pop	{r7, pc}
 8000b46:	bf00      	nop
 8000b48:	40023c00 	.word	0x40023c00

08000b4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000b54:	4b12      	ldr	r3, [pc, #72]	; (8000ba0 <HAL_InitTick+0x54>)
 8000b56:	681a      	ldr	r2, [r3, #0]
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <HAL_InitTick+0x58>)
 8000b5a:	781b      	ldrb	r3, [r3, #0]
 8000b5c:	4619      	mov	r1, r3
 8000b5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b62:	fbb3 f3f1 	udiv	r3, r3, r1
 8000b66:	fbb2 f3f3 	udiv	r3, r2, r3
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f000 fbd9 	bl	8001322 <HAL_SYSTICK_Config>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b00      	cmp	r3, #0
 8000b74:	d001      	beq.n	8000b7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b76:	2301      	movs	r3, #1
 8000b78:	e00e      	b.n	8000b98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b7a:	687b      	ldr	r3, [r7, #4]
 8000b7c:	2b0f      	cmp	r3, #15
 8000b7e:	d80a      	bhi.n	8000b96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b80:	2200      	movs	r2, #0
 8000b82:	6879      	ldr	r1, [r7, #4]
 8000b84:	f04f 30ff 	mov.w	r0, #4294967295
 8000b88:	f000 fba1 	bl	80012ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b8c:	4a06      	ldr	r2, [pc, #24]	; (8000ba8 <HAL_InitTick+0x5c>)
 8000b8e:	687b      	ldr	r3, [r7, #4]
 8000b90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b92:	2300      	movs	r3, #0
 8000b94:	e000      	b.n	8000b98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b96:	2301      	movs	r3, #1
}
 8000b98:	4618      	mov	r0, r3
 8000b9a:	3708      	adds	r7, #8
 8000b9c:	46bd      	mov	sp, r7
 8000b9e:	bd80      	pop	{r7, pc}
 8000ba0:	20000000 	.word	0x20000000
 8000ba4:	20000008 	.word	0x20000008
 8000ba8:	20000004 	.word	0x20000004

08000bac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000bac:	b480      	push	{r7}
 8000bae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000bb0:	4b06      	ldr	r3, [pc, #24]	; (8000bcc <HAL_IncTick+0x20>)
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	461a      	mov	r2, r3
 8000bb6:	4b06      	ldr	r3, [pc, #24]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4413      	add	r3, r2
 8000bbc:	4a04      	ldr	r2, [pc, #16]	; (8000bd0 <HAL_IncTick+0x24>)
 8000bbe:	6013      	str	r3, [r2, #0]
}
 8000bc0:	bf00      	nop
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop
 8000bcc:	20000008 	.word	0x20000008
 8000bd0:	20000114 	.word	0x20000114

08000bd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000bd4:	b480      	push	{r7}
 8000bd6:	af00      	add	r7, sp, #0
  return uwTick;
 8000bd8:	4b03      	ldr	r3, [pc, #12]	; (8000be8 <HAL_GetTick+0x14>)
 8000bda:	681b      	ldr	r3, [r3, #0]
}
 8000bdc:	4618      	mov	r0, r3
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	20000114 	.word	0x20000114

08000bec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b084      	sub	sp, #16
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000bf4:	f7ff ffee 	bl	8000bd4 <HAL_GetTick>
 8000bf8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000bfe:	68fb      	ldr	r3, [r7, #12]
 8000c00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c04:	d005      	beq.n	8000c12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c06:	4b0a      	ldr	r3, [pc, #40]	; (8000c30 <HAL_Delay+0x44>)
 8000c08:	781b      	ldrb	r3, [r3, #0]
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	68fb      	ldr	r3, [r7, #12]
 8000c0e:	4413      	add	r3, r2
 8000c10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000c12:	bf00      	nop
 8000c14:	f7ff ffde 	bl	8000bd4 <HAL_GetTick>
 8000c18:	4602      	mov	r2, r0
 8000c1a:	68bb      	ldr	r3, [r7, #8]
 8000c1c:	1ad3      	subs	r3, r2, r3
 8000c1e:	68fa      	ldr	r2, [r7, #12]
 8000c20:	429a      	cmp	r2, r3
 8000c22:	d8f7      	bhi.n	8000c14 <HAL_Delay+0x28>
  {
  }
}
 8000c24:	bf00      	nop
 8000c26:	bf00      	nop
 8000c28:	3710      	adds	r7, #16
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	20000008 	.word	0x20000008

08000c34 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d101      	bne.n	8000c4a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000c46:	2301      	movs	r3, #1
 8000c48:	e033      	b.n	8000cb2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000c4a:	687b      	ldr	r3, [r7, #4]
 8000c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d109      	bne.n	8000c66 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000c52:	6878      	ldr	r0, [r7, #4]
 8000c54:	f7ff fe28 	bl	80008a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c58:	687b      	ldr	r3, [r7, #4]
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000c5e:	687b      	ldr	r3, [r7, #4]
 8000c60:	2200      	movs	r2, #0
 8000c62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c6a:	f003 0310 	and.w	r3, r3, #16
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d118      	bne.n	8000ca4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c72:	687b      	ldr	r3, [r7, #4]
 8000c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c76:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000c7a:	f023 0302 	bic.w	r3, r3, #2
 8000c7e:	f043 0202 	orr.w	r2, r3, #2
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000c86:	6878      	ldr	r0, [r7, #4]
 8000c88:	f000 f94a 	bl	8000f20 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	2200      	movs	r2, #0
 8000c90:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c96:	f023 0303 	bic.w	r3, r3, #3
 8000c9a:	f043 0201 	orr.w	r2, r3, #1
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	641a      	str	r2, [r3, #64]	; 0x40
 8000ca2:	e001      	b.n	8000ca8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ca4:	2301      	movs	r3, #1
 8000ca6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	2200      	movs	r2, #0
 8000cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000cb0:	7bfb      	ldrb	r3, [r7, #15]
}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3710      	adds	r7, #16
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
	...

08000cbc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000cbc:	b480      	push	{r7}
 8000cbe:	b085      	sub	sp, #20
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
 8000cc4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000cd0:	2b01      	cmp	r3, #1
 8000cd2:	d101      	bne.n	8000cd8 <HAL_ADC_ConfigChannel+0x1c>
 8000cd4:	2302      	movs	r3, #2
 8000cd6:	e113      	b.n	8000f00 <HAL_ADC_ConfigChannel+0x244>
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	2201      	movs	r2, #1
 8000cdc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000ce0:	683b      	ldr	r3, [r7, #0]
 8000ce2:	681b      	ldr	r3, [r3, #0]
 8000ce4:	2b09      	cmp	r3, #9
 8000ce6:	d925      	bls.n	8000d34 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	681b      	ldr	r3, [r3, #0]
 8000cec:	68d9      	ldr	r1, [r3, #12]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	b29b      	uxth	r3, r3
 8000cf4:	461a      	mov	r2, r3
 8000cf6:	4613      	mov	r3, r2
 8000cf8:	005b      	lsls	r3, r3, #1
 8000cfa:	4413      	add	r3, r2
 8000cfc:	3b1e      	subs	r3, #30
 8000cfe:	2207      	movs	r2, #7
 8000d00:	fa02 f303 	lsl.w	r3, r2, r3
 8000d04:	43da      	mvns	r2, r3
 8000d06:	687b      	ldr	r3, [r7, #4]
 8000d08:	681b      	ldr	r3, [r3, #0]
 8000d0a:	400a      	ands	r2, r1
 8000d0c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	68d9      	ldr	r1, [r3, #12]
 8000d14:	683b      	ldr	r3, [r7, #0]
 8000d16:	689a      	ldr	r2, [r3, #8]
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	681b      	ldr	r3, [r3, #0]
 8000d1c:	b29b      	uxth	r3, r3
 8000d1e:	4618      	mov	r0, r3
 8000d20:	4603      	mov	r3, r0
 8000d22:	005b      	lsls	r3, r3, #1
 8000d24:	4403      	add	r3, r0
 8000d26:	3b1e      	subs	r3, #30
 8000d28:	409a      	lsls	r2, r3
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	430a      	orrs	r2, r1
 8000d30:	60da      	str	r2, [r3, #12]
 8000d32:	e022      	b.n	8000d7a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	6919      	ldr	r1, [r3, #16]
 8000d3a:	683b      	ldr	r3, [r7, #0]
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	b29b      	uxth	r3, r3
 8000d40:	461a      	mov	r2, r3
 8000d42:	4613      	mov	r3, r2
 8000d44:	005b      	lsls	r3, r3, #1
 8000d46:	4413      	add	r3, r2
 8000d48:	2207      	movs	r2, #7
 8000d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d4e:	43da      	mvns	r2, r3
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	681b      	ldr	r3, [r3, #0]
 8000d54:	400a      	ands	r2, r1
 8000d56:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	681b      	ldr	r3, [r3, #0]
 8000d5c:	6919      	ldr	r1, [r3, #16]
 8000d5e:	683b      	ldr	r3, [r7, #0]
 8000d60:	689a      	ldr	r2, [r3, #8]
 8000d62:	683b      	ldr	r3, [r7, #0]
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	b29b      	uxth	r3, r3
 8000d68:	4618      	mov	r0, r3
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	005b      	lsls	r3, r3, #1
 8000d6e:	4403      	add	r3, r0
 8000d70:	409a      	lsls	r2, r3
 8000d72:	687b      	ldr	r3, [r7, #4]
 8000d74:	681b      	ldr	r3, [r3, #0]
 8000d76:	430a      	orrs	r2, r1
 8000d78:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000d7a:	683b      	ldr	r3, [r7, #0]
 8000d7c:	685b      	ldr	r3, [r3, #4]
 8000d7e:	2b06      	cmp	r3, #6
 8000d80:	d824      	bhi.n	8000dcc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	685a      	ldr	r2, [r3, #4]
 8000d8c:	4613      	mov	r3, r2
 8000d8e:	009b      	lsls	r3, r3, #2
 8000d90:	4413      	add	r3, r2
 8000d92:	3b05      	subs	r3, #5
 8000d94:	221f      	movs	r2, #31
 8000d96:	fa02 f303 	lsl.w	r3, r2, r3
 8000d9a:	43da      	mvns	r2, r3
 8000d9c:	687b      	ldr	r3, [r7, #4]
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	400a      	ands	r2, r1
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000daa:	683b      	ldr	r3, [r7, #0]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	b29b      	uxth	r3, r3
 8000db0:	4618      	mov	r0, r3
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	685a      	ldr	r2, [r3, #4]
 8000db6:	4613      	mov	r3, r2
 8000db8:	009b      	lsls	r3, r3, #2
 8000dba:	4413      	add	r3, r2
 8000dbc:	3b05      	subs	r3, #5
 8000dbe:	fa00 f203 	lsl.w	r2, r0, r3
 8000dc2:	687b      	ldr	r3, [r7, #4]
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	430a      	orrs	r2, r1
 8000dc8:	635a      	str	r2, [r3, #52]	; 0x34
 8000dca:	e04c      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000dcc:	683b      	ldr	r3, [r7, #0]
 8000dce:	685b      	ldr	r3, [r3, #4]
 8000dd0:	2b0c      	cmp	r3, #12
 8000dd2:	d824      	bhi.n	8000e1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dda:	683b      	ldr	r3, [r7, #0]
 8000ddc:	685a      	ldr	r2, [r3, #4]
 8000dde:	4613      	mov	r3, r2
 8000de0:	009b      	lsls	r3, r3, #2
 8000de2:	4413      	add	r3, r2
 8000de4:	3b23      	subs	r3, #35	; 0x23
 8000de6:	221f      	movs	r2, #31
 8000de8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dec:	43da      	mvns	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	681b      	ldr	r3, [r3, #0]
 8000df2:	400a      	ands	r2, r1
 8000df4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	681b      	ldr	r3, [r3, #0]
 8000dfa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000dfc:	683b      	ldr	r3, [r7, #0]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	b29b      	uxth	r3, r3
 8000e02:	4618      	mov	r0, r3
 8000e04:	683b      	ldr	r3, [r7, #0]
 8000e06:	685a      	ldr	r2, [r3, #4]
 8000e08:	4613      	mov	r3, r2
 8000e0a:	009b      	lsls	r3, r3, #2
 8000e0c:	4413      	add	r3, r2
 8000e0e:	3b23      	subs	r3, #35	; 0x23
 8000e10:	fa00 f203 	lsl.w	r2, r0, r3
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	430a      	orrs	r2, r1
 8000e1a:	631a      	str	r2, [r3, #48]	; 0x30
 8000e1c:	e023      	b.n	8000e66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	681b      	ldr	r3, [r3, #0]
 8000e22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685a      	ldr	r2, [r3, #4]
 8000e28:	4613      	mov	r3, r2
 8000e2a:	009b      	lsls	r3, r3, #2
 8000e2c:	4413      	add	r3, r2
 8000e2e:	3b41      	subs	r3, #65	; 0x41
 8000e30:	221f      	movs	r2, #31
 8000e32:	fa02 f303 	lsl.w	r3, r2, r3
 8000e36:	43da      	mvns	r2, r3
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	400a      	ands	r2, r1
 8000e3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	681b      	ldr	r3, [r3, #0]
 8000e44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000e46:	683b      	ldr	r3, [r7, #0]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	b29b      	uxth	r3, r3
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	685a      	ldr	r2, [r3, #4]
 8000e52:	4613      	mov	r3, r2
 8000e54:	009b      	lsls	r3, r3, #2
 8000e56:	4413      	add	r3, r2
 8000e58:	3b41      	subs	r3, #65	; 0x41
 8000e5a:	fa00 f203 	lsl.w	r2, r0, r3
 8000e5e:	687b      	ldr	r3, [r7, #4]
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	430a      	orrs	r2, r1
 8000e64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e66:	4b29      	ldr	r3, [pc, #164]	; (8000f0c <HAL_ADC_ConfigChannel+0x250>)
 8000e68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	681b      	ldr	r3, [r3, #0]
 8000e6e:	4a28      	ldr	r2, [pc, #160]	; (8000f10 <HAL_ADC_ConfigChannel+0x254>)
 8000e70:	4293      	cmp	r3, r2
 8000e72:	d10f      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x1d8>
 8000e74:	683b      	ldr	r3, [r7, #0]
 8000e76:	681b      	ldr	r3, [r3, #0]
 8000e78:	2b12      	cmp	r3, #18
 8000e7a:	d10b      	bne.n	8000e94 <HAL_ADC_ConfigChannel+0x1d8>
  {
    /* Disable the TEMPSENSOR channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/    
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f423 0200 	bic.w	r2, r3, #8388608	; 0x800000
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	605a      	str	r2, [r3, #4]
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000e88:	68fb      	ldr	r3, [r7, #12]
 8000e8a:	685b      	ldr	r3, [r3, #4]
 8000e8c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000e90:	68fb      	ldr	r3, [r7, #12]
 8000e92:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	4a1d      	ldr	r2, [pc, #116]	; (8000f10 <HAL_ADC_ConfigChannel+0x254>)
 8000e9a:	4293      	cmp	r3, r2
 8000e9c:	d12b      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x23a>
 8000e9e:	683b      	ldr	r3, [r7, #0]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	4a1c      	ldr	r2, [pc, #112]	; (8000f14 <HAL_ADC_ConfigChannel+0x258>)
 8000ea4:	4293      	cmp	r3, r2
 8000ea6:	d003      	beq.n	8000eb0 <HAL_ADC_ConfigChannel+0x1f4>
 8000ea8:	683b      	ldr	r3, [r7, #0]
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	2b11      	cmp	r3, #17
 8000eae:	d122      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x23a>
  {
    /* Disable the VBAT channel in case of using board with multiplixed ADC_CHANNEL_VBAT & ADC_CHANNEL_TEMPSENSOR*/
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
 8000eb0:	68fb      	ldr	r3, [r7, #12]
 8000eb2:	685b      	ldr	r3, [r3, #4]
 8000eb4:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 8000eb8:	68fb      	ldr	r3, [r7, #12]
 8000eba:	605a      	str	r2, [r3, #4]
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000ebc:	68fb      	ldr	r3, [r7, #12]
 8000ebe:	685b      	ldr	r3, [r3, #4]
 8000ec0:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000ec4:	68fb      	ldr	r3, [r7, #12]
 8000ec6:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	681b      	ldr	r3, [r3, #0]
 8000ecc:	4a11      	ldr	r2, [pc, #68]	; (8000f14 <HAL_ADC_ConfigChannel+0x258>)
 8000ece:	4293      	cmp	r3, r2
 8000ed0:	d111      	bne.n	8000ef6 <HAL_ADC_ConfigChannel+0x23a>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000ed2:	4b11      	ldr	r3, [pc, #68]	; (8000f18 <HAL_ADC_ConfigChannel+0x25c>)
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	4a11      	ldr	r2, [pc, #68]	; (8000f1c <HAL_ADC_ConfigChannel+0x260>)
 8000ed8:	fba2 2303 	umull	r2, r3, r2, r3
 8000edc:	0c9a      	lsrs	r2, r3, #18
 8000ede:	4613      	mov	r3, r2
 8000ee0:	009b      	lsls	r3, r3, #2
 8000ee2:	4413      	add	r3, r2
 8000ee4:	005b      	lsls	r3, r3, #1
 8000ee6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ee8:	e002      	b.n	8000ef0 <HAL_ADC_ConfigChannel+0x234>
      {
        counter--;
 8000eea:	68bb      	ldr	r3, [r7, #8]
 8000eec:	3b01      	subs	r3, #1
 8000eee:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	d1f9      	bne.n	8000eea <HAL_ADC_ConfigChannel+0x22e>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000efe:	2300      	movs	r3, #0
}
 8000f00:	4618      	mov	r0, r3
 8000f02:	3714      	adds	r7, #20
 8000f04:	46bd      	mov	sp, r7
 8000f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0a:	4770      	bx	lr
 8000f0c:	40012300 	.word	0x40012300
 8000f10:	40012000 	.word	0x40012000
 8000f14:	10000012 	.word	0x10000012
 8000f18:	20000000 	.word	0x20000000
 8000f1c:	431bde83 	.word	0x431bde83

08000f20 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b085      	sub	sp, #20
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f28:	4b79      	ldr	r3, [pc, #484]	; (8001110 <ADC_Init+0x1f0>)
 8000f2a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8000f2c:	68fb      	ldr	r3, [r7, #12]
 8000f2e:	685b      	ldr	r3, [r3, #4]
 8000f30:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8000f34:	68fb      	ldr	r3, [r7, #12]
 8000f36:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8000f38:	68fb      	ldr	r3, [r7, #12]
 8000f3a:	685a      	ldr	r2, [r3, #4]
 8000f3c:	687b      	ldr	r3, [r7, #4]
 8000f3e:	685b      	ldr	r3, [r3, #4]
 8000f40:	431a      	orrs	r2, r3
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8000f46:	687b      	ldr	r3, [r7, #4]
 8000f48:	681b      	ldr	r3, [r3, #0]
 8000f4a:	685a      	ldr	r2, [r3, #4]
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8000f54:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6859      	ldr	r1, [r3, #4]
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	691b      	ldr	r3, [r3, #16]
 8000f60:	021a      	lsls	r2, r3, #8
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	430a      	orrs	r2, r1
 8000f68:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	685a      	ldr	r2, [r3, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8000f78:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	681b      	ldr	r3, [r3, #0]
 8000f7e:	6859      	ldr	r1, [r3, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	689a      	ldr	r2, [r3, #8]
 8000f84:	687b      	ldr	r3, [r7, #4]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	430a      	orrs	r2, r1
 8000f8a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	689a      	ldr	r2, [r3, #8]
 8000f92:	687b      	ldr	r3, [r7, #4]
 8000f94:	681b      	ldr	r3, [r3, #0]
 8000f96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8000f9a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	6899      	ldr	r1, [r3, #8]
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	68da      	ldr	r2, [r3, #12]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	430a      	orrs	r2, r1
 8000fac:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000fb2:	4a58      	ldr	r2, [pc, #352]	; (8001114 <ADC_Init+0x1f4>)
 8000fb4:	4293      	cmp	r3, r2
 8000fb6:	d022      	beq.n	8000ffe <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000fb8:	687b      	ldr	r3, [r7, #4]
 8000fba:	681b      	ldr	r3, [r3, #0]
 8000fbc:	689a      	ldr	r2, [r3, #8]
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	681b      	ldr	r3, [r3, #0]
 8000fc2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8000fc6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	681b      	ldr	r3, [r3, #0]
 8000fcc:	6899      	ldr	r1, [r3, #8]
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	430a      	orrs	r2, r1
 8000fd8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8000fda:	687b      	ldr	r3, [r7, #4]
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	689a      	ldr	r2, [r3, #8]
 8000fe0:	687b      	ldr	r3, [r7, #4]
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8000fe8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	6899      	ldr	r1, [r3, #8]
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	430a      	orrs	r2, r1
 8000ffa:	609a      	str	r2, [r3, #8]
 8000ffc:	e00f      	b.n	800101e <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689a      	ldr	r2, [r3, #8]
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	681b      	ldr	r3, [r3, #0]
 8001008:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800100c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800100e:	687b      	ldr	r3, [r7, #4]
 8001010:	681b      	ldr	r3, [r3, #0]
 8001012:	689a      	ldr	r2, [r3, #8]
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800101c:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800101e:	687b      	ldr	r3, [r7, #4]
 8001020:	681b      	ldr	r3, [r3, #0]
 8001022:	689a      	ldr	r2, [r3, #8]
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	f022 0202 	bic.w	r2, r2, #2
 800102c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	681b      	ldr	r3, [r3, #0]
 8001032:	6899      	ldr	r1, [r3, #8]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	7e1b      	ldrb	r3, [r3, #24]
 8001038:	005a      	lsls	r2, r3, #1
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	430a      	orrs	r2, r1
 8001040:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001048:	2b00      	cmp	r3, #0
 800104a:	d01b      	beq.n	8001084 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	685a      	ldr	r2, [r3, #4]
 8001052:	687b      	ldr	r3, [r7, #4]
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800105a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	685a      	ldr	r2, [r3, #4]
 8001062:	687b      	ldr	r3, [r7, #4]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800106a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	6859      	ldr	r1, [r3, #4]
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001076:	3b01      	subs	r3, #1
 8001078:	035a      	lsls	r2, r3, #13
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	e007      	b.n	8001094 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	685a      	ldr	r2, [r3, #4]
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	681b      	ldr	r3, [r3, #0]
 800108e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001092:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001094:	687b      	ldr	r3, [r7, #4]
 8001096:	681b      	ldr	r3, [r3, #0]
 8001098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80010a2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	69db      	ldr	r3, [r3, #28]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	051a      	lsls	r2, r3, #20
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	689a      	ldr	r2, [r3, #8]
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80010c8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	6899      	ldr	r1, [r3, #8]
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80010d6:	025a      	lsls	r2, r3, #9
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	681b      	ldr	r3, [r3, #0]
 80010dc:	430a      	orrs	r2, r1
 80010de:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	689a      	ldr	r2, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	681b      	ldr	r3, [r3, #0]
 80010ea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80010ee:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	6899      	ldr	r1, [r3, #8]
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	695b      	ldr	r3, [r3, #20]
 80010fa:	029a      	lsls	r2, r3, #10
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	430a      	orrs	r2, r1
 8001102:	609a      	str	r2, [r3, #8]
}
 8001104:	bf00      	nop
 8001106:	3714      	adds	r7, #20
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr
 8001110:	40012300 	.word	0x40012300
 8001114:	0f000001 	.word	0x0f000001

08001118 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001118:	b480      	push	{r7}
 800111a:	b085      	sub	sp, #20
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	f003 0307 	and.w	r3, r3, #7
 8001126:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001128:	4b0c      	ldr	r3, [pc, #48]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800112a:	68db      	ldr	r3, [r3, #12]
 800112c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800112e:	68ba      	ldr	r2, [r7, #8]
 8001130:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001134:	4013      	ands	r3, r2
 8001136:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001140:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001144:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001148:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800114a:	4a04      	ldr	r2, [pc, #16]	; (800115c <__NVIC_SetPriorityGrouping+0x44>)
 800114c:	68bb      	ldr	r3, [r7, #8]
 800114e:	60d3      	str	r3, [r2, #12]
}
 8001150:	bf00      	nop
 8001152:	3714      	adds	r7, #20
 8001154:	46bd      	mov	sp, r7
 8001156:	f85d 7b04 	ldr.w	r7, [sp], #4
 800115a:	4770      	bx	lr
 800115c:	e000ed00 	.word	0xe000ed00

08001160 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001164:	4b04      	ldr	r3, [pc, #16]	; (8001178 <__NVIC_GetPriorityGrouping+0x18>)
 8001166:	68db      	ldr	r3, [r3, #12]
 8001168:	0a1b      	lsrs	r3, r3, #8
 800116a:	f003 0307 	and.w	r3, r3, #7
}
 800116e:	4618      	mov	r0, r3
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr
 8001178:	e000ed00 	.word	0xe000ed00

0800117c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800117c:	b480      	push	{r7}
 800117e:	b083      	sub	sp, #12
 8001180:	af00      	add	r7, sp, #0
 8001182:	4603      	mov	r3, r0
 8001184:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001186:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800118a:	2b00      	cmp	r3, #0
 800118c:	db0b      	blt.n	80011a6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800118e:	79fb      	ldrb	r3, [r7, #7]
 8001190:	f003 021f 	and.w	r2, r3, #31
 8001194:	4907      	ldr	r1, [pc, #28]	; (80011b4 <__NVIC_EnableIRQ+0x38>)
 8001196:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800119a:	095b      	lsrs	r3, r3, #5
 800119c:	2001      	movs	r0, #1
 800119e:	fa00 f202 	lsl.w	r2, r0, r2
 80011a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80011a6:	bf00      	nop
 80011a8:	370c      	adds	r7, #12
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	e000e100 	.word	0xe000e100

080011b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011b8:	b480      	push	{r7}
 80011ba:	b083      	sub	sp, #12
 80011bc:	af00      	add	r7, sp, #0
 80011be:	4603      	mov	r3, r0
 80011c0:	6039      	str	r1, [r7, #0]
 80011c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db0a      	blt.n	80011e2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011cc:	683b      	ldr	r3, [r7, #0]
 80011ce:	b2da      	uxtb	r2, r3
 80011d0:	490c      	ldr	r1, [pc, #48]	; (8001204 <__NVIC_SetPriority+0x4c>)
 80011d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d6:	0112      	lsls	r2, r2, #4
 80011d8:	b2d2      	uxtb	r2, r2
 80011da:	440b      	add	r3, r1
 80011dc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011e0:	e00a      	b.n	80011f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	b2da      	uxtb	r2, r3
 80011e6:	4908      	ldr	r1, [pc, #32]	; (8001208 <__NVIC_SetPriority+0x50>)
 80011e8:	79fb      	ldrb	r3, [r7, #7]
 80011ea:	f003 030f 	and.w	r3, r3, #15
 80011ee:	3b04      	subs	r3, #4
 80011f0:	0112      	lsls	r2, r2, #4
 80011f2:	b2d2      	uxtb	r2, r2
 80011f4:	440b      	add	r3, r1
 80011f6:	761a      	strb	r2, [r3, #24]
}
 80011f8:	bf00      	nop
 80011fa:	370c      	adds	r7, #12
 80011fc:	46bd      	mov	sp, r7
 80011fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001202:	4770      	bx	lr
 8001204:	e000e100 	.word	0xe000e100
 8001208:	e000ed00 	.word	0xe000ed00

0800120c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800120c:	b480      	push	{r7}
 800120e:	b089      	sub	sp, #36	; 0x24
 8001210:	af00      	add	r7, sp, #0
 8001212:	60f8      	str	r0, [r7, #12]
 8001214:	60b9      	str	r1, [r7, #8]
 8001216:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001218:	68fb      	ldr	r3, [r7, #12]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001220:	69fb      	ldr	r3, [r7, #28]
 8001222:	f1c3 0307 	rsb	r3, r3, #7
 8001226:	2b04      	cmp	r3, #4
 8001228:	bf28      	it	cs
 800122a:	2304      	movcs	r3, #4
 800122c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800122e:	69fb      	ldr	r3, [r7, #28]
 8001230:	3304      	adds	r3, #4
 8001232:	2b06      	cmp	r3, #6
 8001234:	d902      	bls.n	800123c <NVIC_EncodePriority+0x30>
 8001236:	69fb      	ldr	r3, [r7, #28]
 8001238:	3b03      	subs	r3, #3
 800123a:	e000      	b.n	800123e <NVIC_EncodePriority+0x32>
 800123c:	2300      	movs	r3, #0
 800123e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001240:	f04f 32ff 	mov.w	r2, #4294967295
 8001244:	69bb      	ldr	r3, [r7, #24]
 8001246:	fa02 f303 	lsl.w	r3, r2, r3
 800124a:	43da      	mvns	r2, r3
 800124c:	68bb      	ldr	r3, [r7, #8]
 800124e:	401a      	ands	r2, r3
 8001250:	697b      	ldr	r3, [r7, #20]
 8001252:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001254:	f04f 31ff 	mov.w	r1, #4294967295
 8001258:	697b      	ldr	r3, [r7, #20]
 800125a:	fa01 f303 	lsl.w	r3, r1, r3
 800125e:	43d9      	mvns	r1, r3
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001264:	4313      	orrs	r3, r2
         );
}
 8001266:	4618      	mov	r0, r3
 8001268:	3724      	adds	r7, #36	; 0x24
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b082      	sub	sp, #8
 8001278:	af00      	add	r7, sp, #0
 800127a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	3b01      	subs	r3, #1
 8001280:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001284:	d301      	bcc.n	800128a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001286:	2301      	movs	r3, #1
 8001288:	e00f      	b.n	80012aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800128a:	4a0a      	ldr	r2, [pc, #40]	; (80012b4 <SysTick_Config+0x40>)
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	3b01      	subs	r3, #1
 8001290:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001292:	210f      	movs	r1, #15
 8001294:	f04f 30ff 	mov.w	r0, #4294967295
 8001298:	f7ff ff8e 	bl	80011b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800129c:	4b05      	ldr	r3, [pc, #20]	; (80012b4 <SysTick_Config+0x40>)
 800129e:	2200      	movs	r2, #0
 80012a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012a2:	4b04      	ldr	r3, [pc, #16]	; (80012b4 <SysTick_Config+0x40>)
 80012a4:	2207      	movs	r2, #7
 80012a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012a8:	2300      	movs	r3, #0
}
 80012aa:	4618      	mov	r0, r3
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	e000e010 	.word	0xe000e010

080012b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	b082      	sub	sp, #8
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012c0:	6878      	ldr	r0, [r7, #4]
 80012c2:	f7ff ff29 	bl	8001118 <__NVIC_SetPriorityGrouping>
}
 80012c6:	bf00      	nop
 80012c8:	3708      	adds	r7, #8
 80012ca:	46bd      	mov	sp, r7
 80012cc:	bd80      	pop	{r7, pc}

080012ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012ce:	b580      	push	{r7, lr}
 80012d0:	b086      	sub	sp, #24
 80012d2:	af00      	add	r7, sp, #0
 80012d4:	4603      	mov	r3, r0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012dc:	2300      	movs	r3, #0
 80012de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012e0:	f7ff ff3e 	bl	8001160 <__NVIC_GetPriorityGrouping>
 80012e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012e6:	687a      	ldr	r2, [r7, #4]
 80012e8:	68b9      	ldr	r1, [r7, #8]
 80012ea:	6978      	ldr	r0, [r7, #20]
 80012ec:	f7ff ff8e 	bl	800120c <NVIC_EncodePriority>
 80012f0:	4602      	mov	r2, r0
 80012f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80012f6:	4611      	mov	r1, r2
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff ff5d 	bl	80011b8 <__NVIC_SetPriority>
}
 80012fe:	bf00      	nop
 8001300:	3718      	adds	r7, #24
 8001302:	46bd      	mov	sp, r7
 8001304:	bd80      	pop	{r7, pc}

08001306 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001306:	b580      	push	{r7, lr}
 8001308:	b082      	sub	sp, #8
 800130a:	af00      	add	r7, sp, #0
 800130c:	4603      	mov	r3, r0
 800130e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001314:	4618      	mov	r0, r3
 8001316:	f7ff ff31 	bl	800117c <__NVIC_EnableIRQ>
}
 800131a:	bf00      	nop
 800131c:	3708      	adds	r7, #8
 800131e:	46bd      	mov	sp, r7
 8001320:	bd80      	pop	{r7, pc}

08001322 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001322:	b580      	push	{r7, lr}
 8001324:	b082      	sub	sp, #8
 8001326:	af00      	add	r7, sp, #0
 8001328:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800132a:	6878      	ldr	r0, [r7, #4]
 800132c:	f7ff ffa2 	bl	8001274 <SysTick_Config>
 8001330:	4603      	mov	r3, r0
}
 8001332:	4618      	mov	r0, r3
 8001334:	3708      	adds	r7, #8
 8001336:	46bd      	mov	sp, r7
 8001338:	bd80      	pop	{r7, pc}
	...

0800133c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800133c:	b580      	push	{r7, lr}
 800133e:	b086      	sub	sp, #24
 8001340:	af00      	add	r7, sp, #0
 8001342:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001344:	2300      	movs	r3, #0
 8001346:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001348:	f7ff fc44 	bl	8000bd4 <HAL_GetTick>
 800134c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 800134e:	687b      	ldr	r3, [r7, #4]
 8001350:	2b00      	cmp	r3, #0
 8001352:	d101      	bne.n	8001358 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001354:	2301      	movs	r3, #1
 8001356:	e099      	b.n	800148c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	2202      	movs	r2, #2
 800135c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2200      	movs	r2, #0
 8001364:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	681b      	ldr	r3, [r3, #0]
 800136c:	681a      	ldr	r2, [r3, #0]
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	f022 0201 	bic.w	r2, r2, #1
 8001376:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001378:	e00f      	b.n	800139a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800137a:	f7ff fc2b 	bl	8000bd4 <HAL_GetTick>
 800137e:	4602      	mov	r2, r0
 8001380:	693b      	ldr	r3, [r7, #16]
 8001382:	1ad3      	subs	r3, r2, r3
 8001384:	2b05      	cmp	r3, #5
 8001386:	d908      	bls.n	800139a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	2220      	movs	r2, #32
 800138c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	2203      	movs	r2, #3
 8001392:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001396:	2303      	movs	r3, #3
 8001398:	e078      	b.n	800148c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f003 0301 	and.w	r3, r3, #1
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d1e8      	bne.n	800137a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	681b      	ldr	r3, [r3, #0]
 80013ac:	681b      	ldr	r3, [r3, #0]
 80013ae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 80013b0:	697a      	ldr	r2, [r7, #20]
 80013b2:	4b38      	ldr	r3, [pc, #224]	; (8001494 <HAL_DMA_Init+0x158>)
 80013b4:	4013      	ands	r3, r2
 80013b6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	685a      	ldr	r2, [r3, #4]
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	689b      	ldr	r3, [r3, #8]
 80013c0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013c6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	691b      	ldr	r3, [r3, #16]
 80013cc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013ce:	687b      	ldr	r3, [r7, #4]
 80013d0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80013d2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	699b      	ldr	r3, [r3, #24]
 80013d8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80013de:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80013e0:	687b      	ldr	r3, [r7, #4]
 80013e2:	6a1b      	ldr	r3, [r3, #32]
 80013e4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80013e6:	697a      	ldr	r2, [r7, #20]
 80013e8:	4313      	orrs	r3, r2
 80013ea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80013f0:	2b04      	cmp	r3, #4
 80013f2:	d107      	bne.n	8001404 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fc:	4313      	orrs	r3, r2
 80013fe:	697a      	ldr	r2, [r7, #20]
 8001400:	4313      	orrs	r3, r2
 8001402:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	697a      	ldr	r2, [r7, #20]
 800140a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	695b      	ldr	r3, [r3, #20]
 8001412:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001414:	697b      	ldr	r3, [r7, #20]
 8001416:	f023 0307 	bic.w	r3, r3, #7
 800141a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001420:	697a      	ldr	r2, [r7, #20]
 8001422:	4313      	orrs	r3, r2
 8001424:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800142a:	2b04      	cmp	r3, #4
 800142c:	d117      	bne.n	800145e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001432:	697a      	ldr	r2, [r7, #20]
 8001434:	4313      	orrs	r3, r2
 8001436:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001438:	687b      	ldr	r3, [r7, #4]
 800143a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800143c:	2b00      	cmp	r3, #0
 800143e:	d00e      	beq.n	800145e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001440:	6878      	ldr	r0, [r7, #4]
 8001442:	f000 f9e9 	bl	8001818 <DMA_CheckFifoParam>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d008      	beq.n	800145e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2240      	movs	r2, #64	; 0x40
 8001450:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	2201      	movs	r2, #1
 8001456:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800145a:	2301      	movs	r3, #1
 800145c:	e016      	b.n	800148c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	697a      	ldr	r2, [r7, #20]
 8001464:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001466:	6878      	ldr	r0, [r7, #4]
 8001468:	f000 f9a0 	bl	80017ac <DMA_CalcBaseAndBitshift>
 800146c:	4603      	mov	r3, r0
 800146e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001474:	223f      	movs	r2, #63	; 0x3f
 8001476:	409a      	lsls	r2, r3
 8001478:	68fb      	ldr	r3, [r7, #12]
 800147a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	2200      	movs	r2, #0
 8001480:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2201      	movs	r2, #1
 8001486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800148a:	2300      	movs	r3, #0
}
 800148c:	4618      	mov	r0, r3
 800148e:	3718      	adds	r7, #24
 8001490:	46bd      	mov	sp, r7
 8001492:	bd80      	pop	{r7, pc}
 8001494:	f010803f 	.word	0xf010803f

08001498 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001498:	b580      	push	{r7, lr}
 800149a:	b086      	sub	sp, #24
 800149c:	af00      	add	r7, sp, #0
 800149e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80014a4:	4b92      	ldr	r3, [pc, #584]	; (80016f0 <HAL_DMA_IRQHandler+0x258>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a92      	ldr	r2, [pc, #584]	; (80016f4 <HAL_DMA_IRQHandler+0x25c>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0a9b      	lsrs	r3, r3, #10
 80014b0:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014b6:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80014b8:	693b      	ldr	r3, [r7, #16]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014c2:	2208      	movs	r2, #8
 80014c4:	409a      	lsls	r2, r3
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	4013      	ands	r3, r2
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d01a      	beq.n	8001504 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	f003 0304 	and.w	r3, r3, #4
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d013      	beq.n	8001504 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80014dc:	687b      	ldr	r3, [r7, #4]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	681a      	ldr	r2, [r3, #0]
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	681b      	ldr	r3, [r3, #0]
 80014e6:	f022 0204 	bic.w	r2, r2, #4
 80014ea:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80014ec:	687b      	ldr	r3, [r7, #4]
 80014ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014f0:	2208      	movs	r2, #8
 80014f2:	409a      	lsls	r2, r3
 80014f4:	693b      	ldr	r3, [r7, #16]
 80014f6:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014fc:	f043 0201 	orr.w	r2, r3, #1
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001508:	2201      	movs	r2, #1
 800150a:	409a      	lsls	r2, r3
 800150c:	68fb      	ldr	r3, [r7, #12]
 800150e:	4013      	ands	r3, r2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d012      	beq.n	800153a <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800151e:	2b00      	cmp	r3, #0
 8001520:	d00b      	beq.n	800153a <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001526:	2201      	movs	r2, #1
 8001528:	409a      	lsls	r2, r3
 800152a:	693b      	ldr	r3, [r7, #16]
 800152c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001532:	f043 0202 	orr.w	r2, r3, #2
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800153e:	2204      	movs	r2, #4
 8001540:	409a      	lsls	r2, r3
 8001542:	68fb      	ldr	r3, [r7, #12]
 8001544:	4013      	ands	r3, r2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d012      	beq.n	8001570 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800154a:	687b      	ldr	r3, [r7, #4]
 800154c:	681b      	ldr	r3, [r3, #0]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f003 0302 	and.w	r3, r3, #2
 8001554:	2b00      	cmp	r3, #0
 8001556:	d00b      	beq.n	8001570 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800155c:	2204      	movs	r2, #4
 800155e:	409a      	lsls	r2, r3
 8001560:	693b      	ldr	r3, [r7, #16]
 8001562:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001568:	f043 0204 	orr.w	r2, r3, #4
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001574:	2210      	movs	r2, #16
 8001576:	409a      	lsls	r2, r3
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	4013      	ands	r3, r2
 800157c:	2b00      	cmp	r3, #0
 800157e:	d043      	beq.n	8001608 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	681b      	ldr	r3, [r3, #0]
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f003 0308 	and.w	r3, r3, #8
 800158a:	2b00      	cmp	r3, #0
 800158c:	d03c      	beq.n	8001608 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001592:	2210      	movs	r2, #16
 8001594:	409a      	lsls	r2, r3
 8001596:	693b      	ldr	r3, [r7, #16]
 8001598:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015a4:	2b00      	cmp	r3, #0
 80015a6:	d018      	beq.n	80015da <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80015a8:	687b      	ldr	r3, [r7, #4]
 80015aa:	681b      	ldr	r3, [r3, #0]
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d108      	bne.n	80015c8 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d024      	beq.n	8001608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80015be:	687b      	ldr	r3, [r7, #4]
 80015c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015c2:	6878      	ldr	r0, [r7, #4]
 80015c4:	4798      	blx	r3
 80015c6:	e01f      	b.n	8001608 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80015c8:	687b      	ldr	r3, [r7, #4]
 80015ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d01b      	beq.n	8001608 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80015d4:	6878      	ldr	r0, [r7, #4]
 80015d6:	4798      	blx	r3
 80015d8:	e016      	b.n	8001608 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80015da:	687b      	ldr	r3, [r7, #4]
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	681b      	ldr	r3, [r3, #0]
 80015e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d107      	bne.n	80015f8 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	681b      	ldr	r3, [r3, #0]
 80015ec:	681a      	ldr	r2, [r3, #0]
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f022 0208 	bic.w	r2, r2, #8
 80015f6:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	d003      	beq.n	8001608 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001600:	687b      	ldr	r3, [r7, #4]
 8001602:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001604:	6878      	ldr	r0, [r7, #4]
 8001606:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800160c:	2220      	movs	r2, #32
 800160e:	409a      	lsls	r2, r3
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	4013      	ands	r3, r2
 8001614:	2b00      	cmp	r3, #0
 8001616:	f000 808e 	beq.w	8001736 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	f003 0310 	and.w	r3, r3, #16
 8001624:	2b00      	cmp	r3, #0
 8001626:	f000 8086 	beq.w	8001736 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800162e:	2220      	movs	r2, #32
 8001630:	409a      	lsls	r2, r3
 8001632:	693b      	ldr	r3, [r7, #16]
 8001634:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800163c:	b2db      	uxtb	r3, r3
 800163e:	2b05      	cmp	r3, #5
 8001640:	d136      	bne.n	80016b0 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	681a      	ldr	r2, [r3, #0]
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	f022 0216 	bic.w	r2, r2, #22
 8001650:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	695a      	ldr	r2, [r3, #20]
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001660:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001666:	2b00      	cmp	r3, #0
 8001668:	d103      	bne.n	8001672 <HAL_DMA_IRQHandler+0x1da>
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800166e:	2b00      	cmp	r3, #0
 8001670:	d007      	beq.n	8001682 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	681a      	ldr	r2, [r3, #0]
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	f022 0208 	bic.w	r2, r2, #8
 8001680:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001686:	223f      	movs	r2, #63	; 0x3f
 8001688:	409a      	lsls	r2, r3
 800168a:	693b      	ldr	r3, [r7, #16]
 800168c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	2201      	movs	r2, #1
 8001692:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	2200      	movs	r2, #0
 800169a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016a2:	2b00      	cmp	r3, #0
 80016a4:	d07d      	beq.n	80017a2 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80016aa:	6878      	ldr	r0, [r7, #4]
 80016ac:	4798      	blx	r3
        }
        return;
 80016ae:	e078      	b.n	80017a2 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d01c      	beq.n	80016f8 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80016c8:	2b00      	cmp	r3, #0
 80016ca:	d108      	bne.n	80016de <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80016cc:	687b      	ldr	r3, [r7, #4]
 80016ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d0:	2b00      	cmp	r3, #0
 80016d2:	d030      	beq.n	8001736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016d8:	6878      	ldr	r0, [r7, #4]
 80016da:	4798      	blx	r3
 80016dc:	e02b      	b.n	8001736 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d027      	beq.n	8001736 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80016ea:	6878      	ldr	r0, [r7, #4]
 80016ec:	4798      	blx	r3
 80016ee:	e022      	b.n	8001736 <HAL_DMA_IRQHandler+0x29e>
 80016f0:	20000000 	.word	0x20000000
 80016f4:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001702:	2b00      	cmp	r3, #0
 8001704:	d10f      	bne.n	8001726 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001706:	687b      	ldr	r3, [r7, #4]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	681a      	ldr	r2, [r3, #0]
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	f022 0210 	bic.w	r2, r2, #16
 8001714:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	2201      	movs	r2, #1
 800171a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	2200      	movs	r2, #0
 8001722:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800172a:	2b00      	cmp	r3, #0
 800172c:	d003      	beq.n	8001736 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800173a:	2b00      	cmp	r3, #0
 800173c:	d032      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001742:	f003 0301 	and.w	r3, r3, #1
 8001746:	2b00      	cmp	r3, #0
 8001748:	d022      	beq.n	8001790 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	2205      	movs	r2, #5
 800174e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	681a      	ldr	r2, [r3, #0]
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	f022 0201 	bic.w	r2, r2, #1
 8001760:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001762:	68bb      	ldr	r3, [r7, #8]
 8001764:	3301      	adds	r3, #1
 8001766:	60bb      	str	r3, [r7, #8]
 8001768:	697a      	ldr	r2, [r7, #20]
 800176a:	429a      	cmp	r2, r3
 800176c:	d307      	bcc.n	800177e <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f003 0301 	and.w	r3, r3, #1
 8001778:	2b00      	cmp	r3, #0
 800177a:	d1f2      	bne.n	8001762 <HAL_DMA_IRQHandler+0x2ca>
 800177c:	e000      	b.n	8001780 <HAL_DMA_IRQHandler+0x2e8>
          break;
 800177e:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	2201      	movs	r2, #1
 8001784:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	2200      	movs	r2, #0
 800178c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001794:	2b00      	cmp	r3, #0
 8001796:	d005      	beq.n	80017a4 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800179c:	6878      	ldr	r0, [r7, #4]
 800179e:	4798      	blx	r3
 80017a0:	e000      	b.n	80017a4 <HAL_DMA_IRQHandler+0x30c>
        return;
 80017a2:	bf00      	nop
    }
  }
}
 80017a4:	3718      	adds	r7, #24
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}
 80017aa:	bf00      	nop

080017ac <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80017ac:	b480      	push	{r7}
 80017ae:	b085      	sub	sp, #20
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	b2db      	uxtb	r3, r3
 80017ba:	3b10      	subs	r3, #16
 80017bc:	4a14      	ldr	r2, [pc, #80]	; (8001810 <DMA_CalcBaseAndBitshift+0x64>)
 80017be:	fba2 2303 	umull	r2, r3, r2, r3
 80017c2:	091b      	lsrs	r3, r3, #4
 80017c4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80017c6:	4a13      	ldr	r2, [pc, #76]	; (8001814 <DMA_CalcBaseAndBitshift+0x68>)
 80017c8:	68fb      	ldr	r3, [r7, #12]
 80017ca:	4413      	add	r3, r2
 80017cc:	781b      	ldrb	r3, [r3, #0]
 80017ce:	461a      	mov	r2, r3
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80017d4:	68fb      	ldr	r3, [r7, #12]
 80017d6:	2b03      	cmp	r3, #3
 80017d8:	d909      	bls.n	80017ee <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017e2:	f023 0303 	bic.w	r3, r3, #3
 80017e6:	1d1a      	adds	r2, r3, #4
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	659a      	str	r2, [r3, #88]	; 0x58
 80017ec:	e007      	b.n	80017fe <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80017f6:	f023 0303 	bic.w	r3, r3, #3
 80017fa:	687a      	ldr	r2, [r7, #4]
 80017fc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001802:	4618      	mov	r0, r3
 8001804:	3714      	adds	r7, #20
 8001806:	46bd      	mov	sp, r7
 8001808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800180c:	4770      	bx	lr
 800180e:	bf00      	nop
 8001810:	aaaaaaab 	.word	0xaaaaaaab
 8001814:	08002b0c 	.word	0x08002b0c

08001818 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001818:	b480      	push	{r7}
 800181a:	b085      	sub	sp, #20
 800181c:	af00      	add	r7, sp, #0
 800181e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001820:	2300      	movs	r3, #0
 8001822:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001828:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	699b      	ldr	r3, [r3, #24]
 800182e:	2b00      	cmp	r3, #0
 8001830:	d11f      	bne.n	8001872 <DMA_CheckFifoParam+0x5a>
 8001832:	68bb      	ldr	r3, [r7, #8]
 8001834:	2b03      	cmp	r3, #3
 8001836:	d856      	bhi.n	80018e6 <DMA_CheckFifoParam+0xce>
 8001838:	a201      	add	r2, pc, #4	; (adr r2, 8001840 <DMA_CheckFifoParam+0x28>)
 800183a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800183e:	bf00      	nop
 8001840:	08001851 	.word	0x08001851
 8001844:	08001863 	.word	0x08001863
 8001848:	08001851 	.word	0x08001851
 800184c:	080018e7 	.word	0x080018e7
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001854:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001858:	2b00      	cmp	r3, #0
 800185a:	d046      	beq.n	80018ea <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800185c:	2301      	movs	r3, #1
 800185e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001860:	e043      	b.n	80018ea <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001866:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800186a:	d140      	bne.n	80018ee <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800186c:	2301      	movs	r3, #1
 800186e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001870:	e03d      	b.n	80018ee <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001872:	687b      	ldr	r3, [r7, #4]
 8001874:	699b      	ldr	r3, [r3, #24]
 8001876:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800187a:	d121      	bne.n	80018c0 <DMA_CheckFifoParam+0xa8>
 800187c:	68bb      	ldr	r3, [r7, #8]
 800187e:	2b03      	cmp	r3, #3
 8001880:	d837      	bhi.n	80018f2 <DMA_CheckFifoParam+0xda>
 8001882:	a201      	add	r2, pc, #4	; (adr r2, 8001888 <DMA_CheckFifoParam+0x70>)
 8001884:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001888:	08001899 	.word	0x08001899
 800188c:	0800189f 	.word	0x0800189f
 8001890:	08001899 	.word	0x08001899
 8001894:	080018b1 	.word	0x080018b1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001898:	2301      	movs	r3, #1
 800189a:	73fb      	strb	r3, [r7, #15]
      break;
 800189c:	e030      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800189e:	687b      	ldr	r3, [r7, #4]
 80018a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018a2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d025      	beq.n	80018f6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80018aa:	2301      	movs	r3, #1
 80018ac:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80018ae:	e022      	b.n	80018f6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018b4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80018b8:	d11f      	bne.n	80018fa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80018ba:	2301      	movs	r3, #1
 80018bc:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80018be:	e01c      	b.n	80018fa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80018c0:	68bb      	ldr	r3, [r7, #8]
 80018c2:	2b02      	cmp	r3, #2
 80018c4:	d903      	bls.n	80018ce <DMA_CheckFifoParam+0xb6>
 80018c6:	68bb      	ldr	r3, [r7, #8]
 80018c8:	2b03      	cmp	r3, #3
 80018ca:	d003      	beq.n	80018d4 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80018cc:	e018      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80018ce:	2301      	movs	r3, #1
 80018d0:	73fb      	strb	r3, [r7, #15]
      break;
 80018d2:	e015      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018d8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80018dc:	2b00      	cmp	r3, #0
 80018de:	d00e      	beq.n	80018fe <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80018e0:	2301      	movs	r3, #1
 80018e2:	73fb      	strb	r3, [r7, #15]
      break;
 80018e4:	e00b      	b.n	80018fe <DMA_CheckFifoParam+0xe6>
      break;
 80018e6:	bf00      	nop
 80018e8:	e00a      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;
 80018ea:	bf00      	nop
 80018ec:	e008      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;
 80018ee:	bf00      	nop
 80018f0:	e006      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;
 80018f2:	bf00      	nop
 80018f4:	e004      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;
 80018f6:	bf00      	nop
 80018f8:	e002      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;   
 80018fa:	bf00      	nop
 80018fc:	e000      	b.n	8001900 <DMA_CheckFifoParam+0xe8>
      break;
 80018fe:	bf00      	nop
    }
  } 
  
  return status; 
 8001900:	7bfb      	ldrb	r3, [r7, #15]
}
 8001902:	4618      	mov	r0, r3
 8001904:	3714      	adds	r7, #20
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop

08001910 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001910:	b480      	push	{r7}
 8001912:	b089      	sub	sp, #36	; 0x24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800191a:	2300      	movs	r3, #0
 800191c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800191e:	2300      	movs	r3, #0
 8001920:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001922:	2300      	movs	r3, #0
 8001924:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001926:	2300      	movs	r3, #0
 8001928:	61fb      	str	r3, [r7, #28]
 800192a:	e177      	b.n	8001c1c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800192c:	2201      	movs	r2, #1
 800192e:	69fb      	ldr	r3, [r7, #28]
 8001930:	fa02 f303 	lsl.w	r3, r2, r3
 8001934:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	697a      	ldr	r2, [r7, #20]
 800193c:	4013      	ands	r3, r2
 800193e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001940:	693a      	ldr	r2, [r7, #16]
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	429a      	cmp	r2, r3
 8001946:	f040 8166 	bne.w	8001c16 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800194a:	683b      	ldr	r3, [r7, #0]
 800194c:	685b      	ldr	r3, [r3, #4]
 800194e:	f003 0303 	and.w	r3, r3, #3
 8001952:	2b01      	cmp	r3, #1
 8001954:	d005      	beq.n	8001962 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800195e:	2b02      	cmp	r3, #2
 8001960:	d130      	bne.n	80019c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	689b      	ldr	r3, [r3, #8]
 8001966:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001968:	69fb      	ldr	r3, [r7, #28]
 800196a:	005b      	lsls	r3, r3, #1
 800196c:	2203      	movs	r2, #3
 800196e:	fa02 f303 	lsl.w	r3, r2, r3
 8001972:	43db      	mvns	r3, r3
 8001974:	69ba      	ldr	r2, [r7, #24]
 8001976:	4013      	ands	r3, r2
 8001978:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	68da      	ldr	r2, [r3, #12]
 800197e:	69fb      	ldr	r3, [r7, #28]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	fa02 f303 	lsl.w	r3, r2, r3
 8001986:	69ba      	ldr	r2, [r7, #24]
 8001988:	4313      	orrs	r3, r2
 800198a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	69ba      	ldr	r2, [r7, #24]
 8001990:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001998:	2201      	movs	r2, #1
 800199a:	69fb      	ldr	r3, [r7, #28]
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	43db      	mvns	r3, r3
 80019a2:	69ba      	ldr	r2, [r7, #24]
 80019a4:	4013      	ands	r3, r2
 80019a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	091b      	lsrs	r3, r3, #4
 80019ae:	f003 0201 	and.w	r2, r3, #1
 80019b2:	69fb      	ldr	r3, [r7, #28]
 80019b4:	fa02 f303 	lsl.w	r3, r2, r3
 80019b8:	69ba      	ldr	r2, [r7, #24]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	69ba      	ldr	r2, [r7, #24]
 80019c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019c4:	683b      	ldr	r3, [r7, #0]
 80019c6:	685b      	ldr	r3, [r3, #4]
 80019c8:	f003 0303 	and.w	r3, r3, #3
 80019cc:	2b03      	cmp	r3, #3
 80019ce:	d017      	beq.n	8001a00 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	68db      	ldr	r3, [r3, #12]
 80019d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	005b      	lsls	r3, r3, #1
 80019da:	2203      	movs	r2, #3
 80019dc:	fa02 f303 	lsl.w	r3, r2, r3
 80019e0:	43db      	mvns	r3, r3
 80019e2:	69ba      	ldr	r2, [r7, #24]
 80019e4:	4013      	ands	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80019e8:	683b      	ldr	r3, [r7, #0]
 80019ea:	689a      	ldr	r2, [r3, #8]
 80019ec:	69fb      	ldr	r3, [r7, #28]
 80019ee:	005b      	lsls	r3, r3, #1
 80019f0:	fa02 f303 	lsl.w	r3, r2, r3
 80019f4:	69ba      	ldr	r2, [r7, #24]
 80019f6:	4313      	orrs	r3, r2
 80019f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	69ba      	ldr	r2, [r7, #24]
 80019fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a00:	683b      	ldr	r3, [r7, #0]
 8001a02:	685b      	ldr	r3, [r3, #4]
 8001a04:	f003 0303 	and.w	r3, r3, #3
 8001a08:	2b02      	cmp	r3, #2
 8001a0a:	d123      	bne.n	8001a54 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001a0c:	69fb      	ldr	r3, [r7, #28]
 8001a0e:	08da      	lsrs	r2, r3, #3
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	3208      	adds	r2, #8
 8001a14:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001a18:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001a1a:	69fb      	ldr	r3, [r7, #28]
 8001a1c:	f003 0307 	and.w	r3, r3, #7
 8001a20:	009b      	lsls	r3, r3, #2
 8001a22:	220f      	movs	r2, #15
 8001a24:	fa02 f303 	lsl.w	r3, r2, r3
 8001a28:	43db      	mvns	r3, r3
 8001a2a:	69ba      	ldr	r2, [r7, #24]
 8001a2c:	4013      	ands	r3, r2
 8001a2e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	691a      	ldr	r2, [r3, #16]
 8001a34:	69fb      	ldr	r3, [r7, #28]
 8001a36:	f003 0307 	and.w	r3, r3, #7
 8001a3a:	009b      	lsls	r3, r3, #2
 8001a3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001a40:	69ba      	ldr	r2, [r7, #24]
 8001a42:	4313      	orrs	r3, r2
 8001a44:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	08da      	lsrs	r2, r3, #3
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	3208      	adds	r2, #8
 8001a4e:	69b9      	ldr	r1, [r7, #24]
 8001a50:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001a5a:	69fb      	ldr	r3, [r7, #28]
 8001a5c:	005b      	lsls	r3, r3, #1
 8001a5e:	2203      	movs	r2, #3
 8001a60:	fa02 f303 	lsl.w	r3, r2, r3
 8001a64:	43db      	mvns	r3, r3
 8001a66:	69ba      	ldr	r2, [r7, #24]
 8001a68:	4013      	ands	r3, r2
 8001a6a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001a6c:	683b      	ldr	r3, [r7, #0]
 8001a6e:	685b      	ldr	r3, [r3, #4]
 8001a70:	f003 0203 	and.w	r2, r3, #3
 8001a74:	69fb      	ldr	r3, [r7, #28]
 8001a76:	005b      	lsls	r3, r3, #1
 8001a78:	fa02 f303 	lsl.w	r3, r2, r3
 8001a7c:	69ba      	ldr	r2, [r7, #24]
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	69ba      	ldr	r2, [r7, #24]
 8001a86:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	685b      	ldr	r3, [r3, #4]
 8001a8c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a90:	2b00      	cmp	r3, #0
 8001a92:	f000 80c0 	beq.w	8001c16 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	60fb      	str	r3, [r7, #12]
 8001a9a:	4b66      	ldr	r3, [pc, #408]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001a9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a9e:	4a65      	ldr	r2, [pc, #404]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6453      	str	r3, [r2, #68]	; 0x44
 8001aa6:	4b63      	ldr	r3, [pc, #396]	; (8001c34 <HAL_GPIO_Init+0x324>)
 8001aa8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	60fb      	str	r3, [r7, #12]
 8001ab0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001ab2:	4a61      	ldr	r2, [pc, #388]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001ab4:	69fb      	ldr	r3, [r7, #28]
 8001ab6:	089b      	lsrs	r3, r3, #2
 8001ab8:	3302      	adds	r3, #2
 8001aba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001abe:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001ac0:	69fb      	ldr	r3, [r7, #28]
 8001ac2:	f003 0303 	and.w	r3, r3, #3
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	220f      	movs	r2, #15
 8001aca:	fa02 f303 	lsl.w	r3, r2, r3
 8001ace:	43db      	mvns	r3, r3
 8001ad0:	69ba      	ldr	r2, [r7, #24]
 8001ad2:	4013      	ands	r3, r2
 8001ad4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a58      	ldr	r2, [pc, #352]	; (8001c3c <HAL_GPIO_Init+0x32c>)
 8001ada:	4293      	cmp	r3, r2
 8001adc:	d037      	beq.n	8001b4e <HAL_GPIO_Init+0x23e>
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	4a57      	ldr	r2, [pc, #348]	; (8001c40 <HAL_GPIO_Init+0x330>)
 8001ae2:	4293      	cmp	r3, r2
 8001ae4:	d031      	beq.n	8001b4a <HAL_GPIO_Init+0x23a>
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	4a56      	ldr	r2, [pc, #344]	; (8001c44 <HAL_GPIO_Init+0x334>)
 8001aea:	4293      	cmp	r3, r2
 8001aec:	d02b      	beq.n	8001b46 <HAL_GPIO_Init+0x236>
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	4a55      	ldr	r2, [pc, #340]	; (8001c48 <HAL_GPIO_Init+0x338>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d025      	beq.n	8001b42 <HAL_GPIO_Init+0x232>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	4a54      	ldr	r2, [pc, #336]	; (8001c4c <HAL_GPIO_Init+0x33c>)
 8001afa:	4293      	cmp	r3, r2
 8001afc:	d01f      	beq.n	8001b3e <HAL_GPIO_Init+0x22e>
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	4a53      	ldr	r2, [pc, #332]	; (8001c50 <HAL_GPIO_Init+0x340>)
 8001b02:	4293      	cmp	r3, r2
 8001b04:	d019      	beq.n	8001b3a <HAL_GPIO_Init+0x22a>
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	4a52      	ldr	r2, [pc, #328]	; (8001c54 <HAL_GPIO_Init+0x344>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d013      	beq.n	8001b36 <HAL_GPIO_Init+0x226>
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	4a51      	ldr	r2, [pc, #324]	; (8001c58 <HAL_GPIO_Init+0x348>)
 8001b12:	4293      	cmp	r3, r2
 8001b14:	d00d      	beq.n	8001b32 <HAL_GPIO_Init+0x222>
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	4a50      	ldr	r2, [pc, #320]	; (8001c5c <HAL_GPIO_Init+0x34c>)
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d007      	beq.n	8001b2e <HAL_GPIO_Init+0x21e>
 8001b1e:	687b      	ldr	r3, [r7, #4]
 8001b20:	4a4f      	ldr	r2, [pc, #316]	; (8001c60 <HAL_GPIO_Init+0x350>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d101      	bne.n	8001b2a <HAL_GPIO_Init+0x21a>
 8001b26:	2309      	movs	r3, #9
 8001b28:	e012      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2a:	230a      	movs	r3, #10
 8001b2c:	e010      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b2e:	2308      	movs	r3, #8
 8001b30:	e00e      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b32:	2307      	movs	r3, #7
 8001b34:	e00c      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b36:	2306      	movs	r3, #6
 8001b38:	e00a      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3a:	2305      	movs	r3, #5
 8001b3c:	e008      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b3e:	2304      	movs	r3, #4
 8001b40:	e006      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b42:	2303      	movs	r3, #3
 8001b44:	e004      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b46:	2302      	movs	r3, #2
 8001b48:	e002      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e000      	b.n	8001b50 <HAL_GPIO_Init+0x240>
 8001b4e:	2300      	movs	r3, #0
 8001b50:	69fa      	ldr	r2, [r7, #28]
 8001b52:	f002 0203 	and.w	r2, r2, #3
 8001b56:	0092      	lsls	r2, r2, #2
 8001b58:	4093      	lsls	r3, r2
 8001b5a:	69ba      	ldr	r2, [r7, #24]
 8001b5c:	4313      	orrs	r3, r2
 8001b5e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001b60:	4935      	ldr	r1, [pc, #212]	; (8001c38 <HAL_GPIO_Init+0x328>)
 8001b62:	69fb      	ldr	r3, [r7, #28]
 8001b64:	089b      	lsrs	r3, r3, #2
 8001b66:	3302      	adds	r3, #2
 8001b68:	69ba      	ldr	r2, [r7, #24]
 8001b6a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001b6e:	4b3d      	ldr	r3, [pc, #244]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b74:	693b      	ldr	r3, [r7, #16]
 8001b76:	43db      	mvns	r3, r3
 8001b78:	69ba      	ldr	r2, [r7, #24]
 8001b7a:	4013      	ands	r3, r2
 8001b7c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001b7e:	683b      	ldr	r3, [r7, #0]
 8001b80:	685b      	ldr	r3, [r3, #4]
 8001b82:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d003      	beq.n	8001b92 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001b8a:	69ba      	ldr	r2, [r7, #24]
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	4313      	orrs	r3, r2
 8001b90:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001b92:	4a34      	ldr	r2, [pc, #208]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b94:	69bb      	ldr	r3, [r7, #24]
 8001b96:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001b98:	4b32      	ldr	r3, [pc, #200]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	43db      	mvns	r3, r3
 8001ba2:	69ba      	ldr	r2, [r7, #24]
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001ba8:	683b      	ldr	r3, [r7, #0]
 8001baa:	685b      	ldr	r3, [r3, #4]
 8001bac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bb0:	2b00      	cmp	r3, #0
 8001bb2:	d003      	beq.n	8001bbc <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001bb4:	69ba      	ldr	r2, [r7, #24]
 8001bb6:	693b      	ldr	r3, [r7, #16]
 8001bb8:	4313      	orrs	r3, r2
 8001bba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001bbc:	4a29      	ldr	r2, [pc, #164]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bbe:	69bb      	ldr	r3, [r7, #24]
 8001bc0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001bc2:	4b28      	ldr	r3, [pc, #160]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bc4:	689b      	ldr	r3, [r3, #8]
 8001bc6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bc8:	693b      	ldr	r3, [r7, #16]
 8001bca:	43db      	mvns	r3, r3
 8001bcc:	69ba      	ldr	r2, [r7, #24]
 8001bce:	4013      	ands	r3, r2
 8001bd0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001bd2:	683b      	ldr	r3, [r7, #0]
 8001bd4:	685b      	ldr	r3, [r3, #4]
 8001bd6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d003      	beq.n	8001be6 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001bde:	69ba      	ldr	r2, [r7, #24]
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001be6:	4a1f      	ldr	r2, [pc, #124]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001be8:	69bb      	ldr	r3, [r7, #24]
 8001bea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001bec:	4b1d      	ldr	r3, [pc, #116]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001bee:	68db      	ldr	r3, [r3, #12]
 8001bf0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001bf2:	693b      	ldr	r3, [r7, #16]
 8001bf4:	43db      	mvns	r3, r3
 8001bf6:	69ba      	ldr	r2, [r7, #24]
 8001bf8:	4013      	ands	r3, r2
 8001bfa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001bfc:	683b      	ldr	r3, [r7, #0]
 8001bfe:	685b      	ldr	r3, [r3, #4]
 8001c00:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d003      	beq.n	8001c10 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001c08:	69ba      	ldr	r2, [r7, #24]
 8001c0a:	693b      	ldr	r3, [r7, #16]
 8001c0c:	4313      	orrs	r3, r2
 8001c0e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001c10:	4a14      	ldr	r2, [pc, #80]	; (8001c64 <HAL_GPIO_Init+0x354>)
 8001c12:	69bb      	ldr	r3, [r7, #24]
 8001c14:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	3301      	adds	r3, #1
 8001c1a:	61fb      	str	r3, [r7, #28]
 8001c1c:	69fb      	ldr	r3, [r7, #28]
 8001c1e:	2b0f      	cmp	r3, #15
 8001c20:	f67f ae84 	bls.w	800192c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001c24:	bf00      	nop
 8001c26:	bf00      	nop
 8001c28:	3724      	adds	r7, #36	; 0x24
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	40023800 	.word	0x40023800
 8001c38:	40013800 	.word	0x40013800
 8001c3c:	40020000 	.word	0x40020000
 8001c40:	40020400 	.word	0x40020400
 8001c44:	40020800 	.word	0x40020800
 8001c48:	40020c00 	.word	0x40020c00
 8001c4c:	40021000 	.word	0x40021000
 8001c50:	40021400 	.word	0x40021400
 8001c54:	40021800 	.word	0x40021800
 8001c58:	40021c00 	.word	0x40021c00
 8001c5c:	40022000 	.word	0x40022000
 8001c60:	40022400 	.word	0x40022400
 8001c64:	40013c00 	.word	0x40013c00

08001c68 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c68:	b480      	push	{r7}
 8001c6a:	b083      	sub	sp, #12
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
 8001c70:	460b      	mov	r3, r1
 8001c72:	807b      	strh	r3, [r7, #2]
 8001c74:	4613      	mov	r3, r2
 8001c76:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001c78:	787b      	ldrb	r3, [r7, #1]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d003      	beq.n	8001c86 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001c7e:	887a      	ldrh	r2, [r7, #2]
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001c84:	e003      	b.n	8001c8e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001c86:	887b      	ldrh	r3, [r7, #2]
 8001c88:	041a      	lsls	r2, r3, #16
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	619a      	str	r2, [r3, #24]
}
 8001c8e:	bf00      	nop
 8001c90:	370c      	adds	r7, #12
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr

08001c9a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001c9a:	b480      	push	{r7}
 8001c9c:	b085      	sub	sp, #20
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
 8001ca2:	460b      	mov	r3, r1
 8001ca4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	695b      	ldr	r3, [r3, #20]
 8001caa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001cac:	887a      	ldrh	r2, [r7, #2]
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	4013      	ands	r3, r2
 8001cb2:	041a      	lsls	r2, r3, #16
 8001cb4:	68fb      	ldr	r3, [r7, #12]
 8001cb6:	43d9      	mvns	r1, r3
 8001cb8:	887b      	ldrh	r3, [r7, #2]
 8001cba:	400b      	ands	r3, r1
 8001cbc:	431a      	orrs	r2, r3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	619a      	str	r2, [r3, #24]
}
 8001cc2:	bf00      	nop
 8001cc4:	3714      	adds	r7, #20
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ccc:	4770      	bx	lr
	...

08001cd0 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001cd0:	b580      	push	{r7, lr}
 8001cd2:	b082      	sub	sp, #8
 8001cd4:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001cd6:	2300      	movs	r3, #0
 8001cd8:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001cda:	2300      	movs	r3, #0
 8001cdc:	603b      	str	r3, [r7, #0]
 8001cde:	4b20      	ldr	r3, [pc, #128]	; (8001d60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ce2:	4a1f      	ldr	r2, [pc, #124]	; (8001d60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001ce4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8001cea:	4b1d      	ldr	r3, [pc, #116]	; (8001d60 <HAL_PWREx_EnableOverDrive+0x90>)
 8001cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001cf2:	603b      	str	r3, [r7, #0]
 8001cf4:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001cf6:	4b1b      	ldr	r3, [pc, #108]	; (8001d64 <HAL_PWREx_EnableOverDrive+0x94>)
 8001cf8:	2201      	movs	r2, #1
 8001cfa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001cfc:	f7fe ff6a 	bl	8000bd4 <HAL_GetTick>
 8001d00:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d02:	e009      	b.n	8001d18 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d04:	f7fe ff66 	bl	8000bd4 <HAL_GetTick>
 8001d08:	4602      	mov	r2, r0
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	1ad3      	subs	r3, r2, r3
 8001d0e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d12:	d901      	bls.n	8001d18 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001d14:	2303      	movs	r3, #3
 8001d16:	e01f      	b.n	8001d58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001d18:	4b13      	ldr	r3, [pc, #76]	; (8001d68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d1a:	685b      	ldr	r3, [r3, #4]
 8001d1c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d20:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d24:	d1ee      	bne.n	8001d04 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8001d26:	4b11      	ldr	r3, [pc, #68]	; (8001d6c <HAL_PWREx_EnableOverDrive+0x9c>)
 8001d28:	2201      	movs	r2, #1
 8001d2a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001d2c:	f7fe ff52 	bl	8000bd4 <HAL_GetTick>
 8001d30:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d32:	e009      	b.n	8001d48 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001d34:	f7fe ff4e 	bl	8000bd4 <HAL_GetTick>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	1ad3      	subs	r3, r2, r3
 8001d3e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001d42:	d901      	bls.n	8001d48 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8001d44:	2303      	movs	r3, #3
 8001d46:	e007      	b.n	8001d58 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8001d48:	4b07      	ldr	r3, [pc, #28]	; (8001d68 <HAL_PWREx_EnableOverDrive+0x98>)
 8001d4a:	685b      	ldr	r3, [r3, #4]
 8001d4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d50:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8001d54:	d1ee      	bne.n	8001d34 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 8001d56:	2300      	movs	r3, #0
}
 8001d58:	4618      	mov	r0, r3
 8001d5a:	3708      	adds	r7, #8
 8001d5c:	46bd      	mov	sp, r7
 8001d5e:	bd80      	pop	{r7, pc}
 8001d60:	40023800 	.word	0x40023800
 8001d64:	420e0040 	.word	0x420e0040
 8001d68:	40007000 	.word	0x40007000
 8001d6c:	420e0044 	.word	0x420e0044

08001d70 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b086      	sub	sp, #24
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d101      	bne.n	8001d82 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d7e:	2301      	movs	r3, #1
 8001d80:	e264      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f003 0301 	and.w	r3, r3, #1
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d075      	beq.n	8001e7a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d8e:	4ba3      	ldr	r3, [pc, #652]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001d90:	689b      	ldr	r3, [r3, #8]
 8001d92:	f003 030c 	and.w	r3, r3, #12
 8001d96:	2b04      	cmp	r3, #4
 8001d98:	d00c      	beq.n	8001db4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d9a:	4ba0      	ldr	r3, [pc, #640]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001d9c:	689b      	ldr	r3, [r3, #8]
 8001d9e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001da2:	2b08      	cmp	r3, #8
 8001da4:	d112      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001da6:	4b9d      	ldr	r3, [pc, #628]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dae:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001db2:	d10b      	bne.n	8001dcc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001db4:	4b99      	ldr	r3, [pc, #612]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dbc:	2b00      	cmp	r3, #0
 8001dbe:	d05b      	beq.n	8001e78 <HAL_RCC_OscConfig+0x108>
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d157      	bne.n	8001e78 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001dc8:	2301      	movs	r3, #1
 8001dca:	e23f      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001dd4:	d106      	bne.n	8001de4 <HAL_RCC_OscConfig+0x74>
 8001dd6:	4b91      	ldr	r3, [pc, #580]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	4a90      	ldr	r2, [pc, #576]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001ddc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de0:	6013      	str	r3, [r2, #0]
 8001de2:	e01d      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	685b      	ldr	r3, [r3, #4]
 8001de8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dec:	d10c      	bne.n	8001e08 <HAL_RCC_OscConfig+0x98>
 8001dee:	4b8b      	ldr	r3, [pc, #556]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a8a      	ldr	r2, [pc, #552]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001df4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001df8:	6013      	str	r3, [r2, #0]
 8001dfa:	4b88      	ldr	r3, [pc, #544]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	4a87      	ldr	r2, [pc, #540]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001e04:	6013      	str	r3, [r2, #0]
 8001e06:	e00b      	b.n	8001e20 <HAL_RCC_OscConfig+0xb0>
 8001e08:	4b84      	ldr	r3, [pc, #528]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	4a83      	ldr	r2, [pc, #524]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e0e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001e12:	6013      	str	r3, [r2, #0]
 8001e14:	4b81      	ldr	r3, [pc, #516]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	4a80      	ldr	r2, [pc, #512]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e1a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e1e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	685b      	ldr	r3, [r3, #4]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d013      	beq.n	8001e50 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e28:	f7fe fed4 	bl	8000bd4 <HAL_GetTick>
 8001e2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e2e:	e008      	b.n	8001e42 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e30:	f7fe fed0 	bl	8000bd4 <HAL_GetTick>
 8001e34:	4602      	mov	r2, r0
 8001e36:	693b      	ldr	r3, [r7, #16]
 8001e38:	1ad3      	subs	r3, r2, r3
 8001e3a:	2b64      	cmp	r3, #100	; 0x64
 8001e3c:	d901      	bls.n	8001e42 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001e3e:	2303      	movs	r3, #3
 8001e40:	e204      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e42:	4b76      	ldr	r3, [pc, #472]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e44:	681b      	ldr	r3, [r3, #0]
 8001e46:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d0f0      	beq.n	8001e30 <HAL_RCC_OscConfig+0xc0>
 8001e4e:	e014      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e50:	f7fe fec0 	bl	8000bd4 <HAL_GetTick>
 8001e54:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e56:	e008      	b.n	8001e6a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001e58:	f7fe febc 	bl	8000bd4 <HAL_GetTick>
 8001e5c:	4602      	mov	r2, r0
 8001e5e:	693b      	ldr	r3, [r7, #16]
 8001e60:	1ad3      	subs	r3, r2, r3
 8001e62:	2b64      	cmp	r3, #100	; 0x64
 8001e64:	d901      	bls.n	8001e6a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e66:	2303      	movs	r3, #3
 8001e68:	e1f0      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e6a:	4b6c      	ldr	r3, [pc, #432]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d1f0      	bne.n	8001e58 <HAL_RCC_OscConfig+0xe8>
 8001e76:	e000      	b.n	8001e7a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e78:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f003 0302 	and.w	r3, r3, #2
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d063      	beq.n	8001f4e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e86:	4b65      	ldr	r3, [pc, #404]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e88:	689b      	ldr	r3, [r3, #8]
 8001e8a:	f003 030c 	and.w	r3, r3, #12
 8001e8e:	2b00      	cmp	r3, #0
 8001e90:	d00b      	beq.n	8001eaa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e92:	4b62      	ldr	r3, [pc, #392]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001e94:	689b      	ldr	r3, [r3, #8]
 8001e96:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e9a:	2b08      	cmp	r3, #8
 8001e9c:	d11c      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e9e:	4b5f      	ldr	r3, [pc, #380]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001ea0:	685b      	ldr	r3, [r3, #4]
 8001ea2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d116      	bne.n	8001ed8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eaa:	4b5c      	ldr	r3, [pc, #368]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f003 0302 	and.w	r3, r3, #2
 8001eb2:	2b00      	cmp	r3, #0
 8001eb4:	d005      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	68db      	ldr	r3, [r3, #12]
 8001eba:	2b01      	cmp	r3, #1
 8001ebc:	d001      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e1c4      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ec2:	4b56      	ldr	r3, [pc, #344]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	691b      	ldr	r3, [r3, #16]
 8001ece:	00db      	lsls	r3, r3, #3
 8001ed0:	4952      	ldr	r1, [pc, #328]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001ed2:	4313      	orrs	r3, r2
 8001ed4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001ed6:	e03a      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d020      	beq.n	8001f22 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ee0:	4b4f      	ldr	r3, [pc, #316]	; (8002020 <HAL_RCC_OscConfig+0x2b0>)
 8001ee2:	2201      	movs	r2, #1
 8001ee4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ee6:	f7fe fe75 	bl	8000bd4 <HAL_GetTick>
 8001eea:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001eec:	e008      	b.n	8001f00 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001eee:	f7fe fe71 	bl	8000bd4 <HAL_GetTick>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	693b      	ldr	r3, [r7, #16]
 8001ef6:	1ad3      	subs	r3, r2, r3
 8001ef8:	2b02      	cmp	r3, #2
 8001efa:	d901      	bls.n	8001f00 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001efc:	2303      	movs	r3, #3
 8001efe:	e1a5      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f00:	4b46      	ldr	r3, [pc, #280]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f003 0302 	and.w	r3, r3, #2
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d0f0      	beq.n	8001eee <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f0c:	4b43      	ldr	r3, [pc, #268]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	691b      	ldr	r3, [r3, #16]
 8001f18:	00db      	lsls	r3, r3, #3
 8001f1a:	4940      	ldr	r1, [pc, #256]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001f1c:	4313      	orrs	r3, r2
 8001f1e:	600b      	str	r3, [r1, #0]
 8001f20:	e015      	b.n	8001f4e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f22:	4b3f      	ldr	r3, [pc, #252]	; (8002020 <HAL_RCC_OscConfig+0x2b0>)
 8001f24:	2200      	movs	r2, #0
 8001f26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f28:	f7fe fe54 	bl	8000bd4 <HAL_GetTick>
 8001f2c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f2e:	e008      	b.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001f30:	f7fe fe50 	bl	8000bd4 <HAL_GetTick>
 8001f34:	4602      	mov	r2, r0
 8001f36:	693b      	ldr	r3, [r7, #16]
 8001f38:	1ad3      	subs	r3, r2, r3
 8001f3a:	2b02      	cmp	r3, #2
 8001f3c:	d901      	bls.n	8001f42 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	e184      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f42:	4b36      	ldr	r3, [pc, #216]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f003 0302 	and.w	r3, r3, #2
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d1f0      	bne.n	8001f30 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	f003 0308 	and.w	r3, r3, #8
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d030      	beq.n	8001fbc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	695b      	ldr	r3, [r3, #20]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d016      	beq.n	8001f90 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f62:	4b30      	ldr	r3, [pc, #192]	; (8002024 <HAL_RCC_OscConfig+0x2b4>)
 8001f64:	2201      	movs	r2, #1
 8001f66:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f68:	f7fe fe34 	bl	8000bd4 <HAL_GetTick>
 8001f6c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f6e:	e008      	b.n	8001f82 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f70:	f7fe fe30 	bl	8000bd4 <HAL_GetTick>
 8001f74:	4602      	mov	r2, r0
 8001f76:	693b      	ldr	r3, [r7, #16]
 8001f78:	1ad3      	subs	r3, r2, r3
 8001f7a:	2b02      	cmp	r3, #2
 8001f7c:	d901      	bls.n	8001f82 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f7e:	2303      	movs	r3, #3
 8001f80:	e164      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f82:	4b26      	ldr	r3, [pc, #152]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f86:	f003 0302 	and.w	r3, r3, #2
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d0f0      	beq.n	8001f70 <HAL_RCC_OscConfig+0x200>
 8001f8e:	e015      	b.n	8001fbc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f90:	4b24      	ldr	r3, [pc, #144]	; (8002024 <HAL_RCC_OscConfig+0x2b4>)
 8001f92:	2200      	movs	r2, #0
 8001f94:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f96:	f7fe fe1d 	bl	8000bd4 <HAL_GetTick>
 8001f9a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f9c:	e008      	b.n	8001fb0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f9e:	f7fe fe19 	bl	8000bd4 <HAL_GetTick>
 8001fa2:	4602      	mov	r2, r0
 8001fa4:	693b      	ldr	r3, [r7, #16]
 8001fa6:	1ad3      	subs	r3, r2, r3
 8001fa8:	2b02      	cmp	r3, #2
 8001faa:	d901      	bls.n	8001fb0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8001fac:	2303      	movs	r3, #3
 8001fae:	e14d      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001fb2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001fb4:	f003 0302 	and.w	r3, r3, #2
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1f0      	bne.n	8001f9e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	f003 0304 	and.w	r3, r3, #4
 8001fc4:	2b00      	cmp	r3, #0
 8001fc6:	f000 80a0 	beq.w	800210a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fca:	2300      	movs	r3, #0
 8001fcc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001fd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d10f      	bne.n	8001ffa <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fda:	2300      	movs	r3, #0
 8001fdc:	60bb      	str	r3, [r7, #8]
 8001fde:	4b0f      	ldr	r3, [pc, #60]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fe2:	4a0e      	ldr	r2, [pc, #56]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001fe4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fe8:	6413      	str	r3, [r2, #64]	; 0x40
 8001fea:	4b0c      	ldr	r3, [pc, #48]	; (800201c <HAL_RCC_OscConfig+0x2ac>)
 8001fec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ff2:	60bb      	str	r3, [r7, #8]
 8001ff4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001ffa:	4b0b      	ldr	r3, [pc, #44]	; (8002028 <HAL_RCC_OscConfig+0x2b8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002002:	2b00      	cmp	r3, #0
 8002004:	d121      	bne.n	800204a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002006:	4b08      	ldr	r3, [pc, #32]	; (8002028 <HAL_RCC_OscConfig+0x2b8>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	4a07      	ldr	r2, [pc, #28]	; (8002028 <HAL_RCC_OscConfig+0x2b8>)
 800200c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002010:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002012:	f7fe fddf 	bl	8000bd4 <HAL_GetTick>
 8002016:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002018:	e011      	b.n	800203e <HAL_RCC_OscConfig+0x2ce>
 800201a:	bf00      	nop
 800201c:	40023800 	.word	0x40023800
 8002020:	42470000 	.word	0x42470000
 8002024:	42470e80 	.word	0x42470e80
 8002028:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800202c:	f7fe fdd2 	bl	8000bd4 <HAL_GetTick>
 8002030:	4602      	mov	r2, r0
 8002032:	693b      	ldr	r3, [r7, #16]
 8002034:	1ad3      	subs	r3, r2, r3
 8002036:	2b02      	cmp	r3, #2
 8002038:	d901      	bls.n	800203e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800203a:	2303      	movs	r3, #3
 800203c:	e106      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800203e:	4b85      	ldr	r3, [pc, #532]	; (8002254 <HAL_RCC_OscConfig+0x4e4>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002046:	2b00      	cmp	r3, #0
 8002048:	d0f0      	beq.n	800202c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	689b      	ldr	r3, [r3, #8]
 800204e:	2b01      	cmp	r3, #1
 8002050:	d106      	bne.n	8002060 <HAL_RCC_OscConfig+0x2f0>
 8002052:	4b81      	ldr	r3, [pc, #516]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002054:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002056:	4a80      	ldr	r2, [pc, #512]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002058:	f043 0301 	orr.w	r3, r3, #1
 800205c:	6713      	str	r3, [r2, #112]	; 0x70
 800205e:	e01c      	b.n	800209a <HAL_RCC_OscConfig+0x32a>
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	689b      	ldr	r3, [r3, #8]
 8002064:	2b05      	cmp	r3, #5
 8002066:	d10c      	bne.n	8002082 <HAL_RCC_OscConfig+0x312>
 8002068:	4b7b      	ldr	r3, [pc, #492]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 800206a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800206c:	4a7a      	ldr	r2, [pc, #488]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 800206e:	f043 0304 	orr.w	r3, r3, #4
 8002072:	6713      	str	r3, [r2, #112]	; 0x70
 8002074:	4b78      	ldr	r3, [pc, #480]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002076:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002078:	4a77      	ldr	r2, [pc, #476]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 800207a:	f043 0301 	orr.w	r3, r3, #1
 800207e:	6713      	str	r3, [r2, #112]	; 0x70
 8002080:	e00b      	b.n	800209a <HAL_RCC_OscConfig+0x32a>
 8002082:	4b75      	ldr	r3, [pc, #468]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002084:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002086:	4a74      	ldr	r2, [pc, #464]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002088:	f023 0301 	bic.w	r3, r3, #1
 800208c:	6713      	str	r3, [r2, #112]	; 0x70
 800208e:	4b72      	ldr	r3, [pc, #456]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002090:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002092:	4a71      	ldr	r2, [pc, #452]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002094:	f023 0304 	bic.w	r3, r3, #4
 8002098:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	689b      	ldr	r3, [r3, #8]
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d015      	beq.n	80020ce <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80020a2:	f7fe fd97 	bl	8000bd4 <HAL_GetTick>
 80020a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020a8:	e00a      	b.n	80020c0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020aa:	f7fe fd93 	bl	8000bd4 <HAL_GetTick>
 80020ae:	4602      	mov	r2, r0
 80020b0:	693b      	ldr	r3, [r7, #16]
 80020b2:	1ad3      	subs	r3, r2, r3
 80020b4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020b8:	4293      	cmp	r3, r2
 80020ba:	d901      	bls.n	80020c0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80020bc:	2303      	movs	r3, #3
 80020be:	e0c5      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c0:	4b65      	ldr	r3, [pc, #404]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 80020c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020c4:	f003 0302 	and.w	r3, r3, #2
 80020c8:	2b00      	cmp	r3, #0
 80020ca:	d0ee      	beq.n	80020aa <HAL_RCC_OscConfig+0x33a>
 80020cc:	e014      	b.n	80020f8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020ce:	f7fe fd81 	bl	8000bd4 <HAL_GetTick>
 80020d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d4:	e00a      	b.n	80020ec <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80020d6:	f7fe fd7d 	bl	8000bd4 <HAL_GetTick>
 80020da:	4602      	mov	r2, r0
 80020dc:	693b      	ldr	r3, [r7, #16]
 80020de:	1ad3      	subs	r3, r2, r3
 80020e0:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e4:	4293      	cmp	r3, r2
 80020e6:	d901      	bls.n	80020ec <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80020e8:	2303      	movs	r3, #3
 80020ea:	e0af      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020ec:	4b5a      	ldr	r3, [pc, #360]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 80020ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020f0:	f003 0302 	and.w	r3, r3, #2
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d1ee      	bne.n	80020d6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80020f8:	7dfb      	ldrb	r3, [r7, #23]
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	d105      	bne.n	800210a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80020fe:	4b56      	ldr	r3, [pc, #344]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002102:	4a55      	ldr	r2, [pc, #340]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002104:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002108:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	699b      	ldr	r3, [r3, #24]
 800210e:	2b00      	cmp	r3, #0
 8002110:	f000 809b 	beq.w	800224a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002114:	4b50      	ldr	r3, [pc, #320]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 8002116:	689b      	ldr	r3, [r3, #8]
 8002118:	f003 030c 	and.w	r3, r3, #12
 800211c:	2b08      	cmp	r3, #8
 800211e:	d05c      	beq.n	80021da <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	699b      	ldr	r3, [r3, #24]
 8002124:	2b02      	cmp	r3, #2
 8002126:	d141      	bne.n	80021ac <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002128:	4b4c      	ldr	r3, [pc, #304]	; (800225c <HAL_RCC_OscConfig+0x4ec>)
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800212e:	f7fe fd51 	bl	8000bd4 <HAL_GetTick>
 8002132:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002134:	e008      	b.n	8002148 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002136:	f7fe fd4d 	bl	8000bd4 <HAL_GetTick>
 800213a:	4602      	mov	r2, r0
 800213c:	693b      	ldr	r3, [r7, #16]
 800213e:	1ad3      	subs	r3, r2, r3
 8002140:	2b02      	cmp	r3, #2
 8002142:	d901      	bls.n	8002148 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002144:	2303      	movs	r3, #3
 8002146:	e081      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002148:	4b43      	ldr	r3, [pc, #268]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d1f0      	bne.n	8002136 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	69da      	ldr	r2, [r3, #28]
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	431a      	orrs	r2, r3
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002162:	019b      	lsls	r3, r3, #6
 8002164:	431a      	orrs	r2, r3
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800216a:	085b      	lsrs	r3, r3, #1
 800216c:	3b01      	subs	r3, #1
 800216e:	041b      	lsls	r3, r3, #16
 8002170:	431a      	orrs	r2, r3
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002176:	061b      	lsls	r3, r3, #24
 8002178:	4937      	ldr	r1, [pc, #220]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 800217a:	4313      	orrs	r3, r2
 800217c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800217e:	4b37      	ldr	r3, [pc, #220]	; (800225c <HAL_RCC_OscConfig+0x4ec>)
 8002180:	2201      	movs	r2, #1
 8002182:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002184:	f7fe fd26 	bl	8000bd4 <HAL_GetTick>
 8002188:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800218a:	e008      	b.n	800219e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800218c:	f7fe fd22 	bl	8000bd4 <HAL_GetTick>
 8002190:	4602      	mov	r2, r0
 8002192:	693b      	ldr	r3, [r7, #16]
 8002194:	1ad3      	subs	r3, r2, r3
 8002196:	2b02      	cmp	r3, #2
 8002198:	d901      	bls.n	800219e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800219a:	2303      	movs	r3, #3
 800219c:	e056      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800219e:	4b2e      	ldr	r3, [pc, #184]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d0f0      	beq.n	800218c <HAL_RCC_OscConfig+0x41c>
 80021aa:	e04e      	b.n	800224a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ac:	4b2b      	ldr	r3, [pc, #172]	; (800225c <HAL_RCC_OscConfig+0x4ec>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b2:	f7fe fd0f 	bl	8000bd4 <HAL_GetTick>
 80021b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021b8:	e008      	b.n	80021cc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80021ba:	f7fe fd0b 	bl	8000bd4 <HAL_GetTick>
 80021be:	4602      	mov	r2, r0
 80021c0:	693b      	ldr	r3, [r7, #16]
 80021c2:	1ad3      	subs	r3, r2, r3
 80021c4:	2b02      	cmp	r3, #2
 80021c6:	d901      	bls.n	80021cc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80021c8:	2303      	movs	r3, #3
 80021ca:	e03f      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80021cc:	4b22      	ldr	r3, [pc, #136]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d1f0      	bne.n	80021ba <HAL_RCC_OscConfig+0x44a>
 80021d8:	e037      	b.n	800224a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	699b      	ldr	r3, [r3, #24]
 80021de:	2b01      	cmp	r3, #1
 80021e0:	d101      	bne.n	80021e6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80021e2:	2301      	movs	r3, #1
 80021e4:	e032      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80021e6:	4b1c      	ldr	r3, [pc, #112]	; (8002258 <HAL_RCC_OscConfig+0x4e8>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	699b      	ldr	r3, [r3, #24]
 80021f0:	2b01      	cmp	r3, #1
 80021f2:	d028      	beq.n	8002246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021f4:	68fb      	ldr	r3, [r7, #12]
 80021f6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021fe:	429a      	cmp	r2, r3
 8002200:	d121      	bne.n	8002246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800220c:	429a      	cmp	r2, r3
 800220e:	d11a      	bne.n	8002246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002210:	68fa      	ldr	r2, [r7, #12]
 8002212:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002216:	4013      	ands	r3, r2
 8002218:	687a      	ldr	r2, [r7, #4]
 800221a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800221c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800221e:	4293      	cmp	r3, r2
 8002220:	d111      	bne.n	8002246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800222c:	085b      	lsrs	r3, r3, #1
 800222e:	3b01      	subs	r3, #1
 8002230:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002232:	429a      	cmp	r2, r3
 8002234:	d107      	bne.n	8002246 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002236:	68fb      	ldr	r3, [r7, #12]
 8002238:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002240:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002242:	429a      	cmp	r2, r3
 8002244:	d001      	beq.n	800224a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002246:	2301      	movs	r3, #1
 8002248:	e000      	b.n	800224c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800224a:	2300      	movs	r3, #0
}
 800224c:	4618      	mov	r0, r3
 800224e:	3718      	adds	r7, #24
 8002250:	46bd      	mov	sp, r7
 8002252:	bd80      	pop	{r7, pc}
 8002254:	40007000 	.word	0x40007000
 8002258:	40023800 	.word	0x40023800
 800225c:	42470060 	.word	0x42470060

08002260 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002260:	b580      	push	{r7, lr}
 8002262:	b084      	sub	sp, #16
 8002264:	af00      	add	r7, sp, #0
 8002266:	6078      	str	r0, [r7, #4]
 8002268:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	2b00      	cmp	r3, #0
 800226e:	d101      	bne.n	8002274 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0cc      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002274:	4b68      	ldr	r3, [pc, #416]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 030f 	and.w	r3, r3, #15
 800227c:	683a      	ldr	r2, [r7, #0]
 800227e:	429a      	cmp	r2, r3
 8002280:	d90c      	bls.n	800229c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002282:	4b65      	ldr	r3, [pc, #404]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002284:	683a      	ldr	r2, [r7, #0]
 8002286:	b2d2      	uxtb	r2, r2
 8002288:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800228a:	4b63      	ldr	r3, [pc, #396]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 030f 	and.w	r3, r3, #15
 8002292:	683a      	ldr	r2, [r7, #0]
 8002294:	429a      	cmp	r2, r3
 8002296:	d001      	beq.n	800229c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002298:	2301      	movs	r3, #1
 800229a:	e0b8      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	f003 0302 	and.w	r3, r3, #2
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d020      	beq.n	80022ea <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f003 0304 	and.w	r3, r3, #4
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d005      	beq.n	80022c0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80022b4:	4b59      	ldr	r3, [pc, #356]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022b6:	689b      	ldr	r3, [r3, #8]
 80022b8:	4a58      	ldr	r2, [pc, #352]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80022be:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	f003 0308 	and.w	r3, r3, #8
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d005      	beq.n	80022d8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022cc:	4b53      	ldr	r3, [pc, #332]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022ce:	689b      	ldr	r3, [r3, #8]
 80022d0:	4a52      	ldr	r2, [pc, #328]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022d2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80022d6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022d8:	4b50      	ldr	r3, [pc, #320]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022da:	689b      	ldr	r3, [r3, #8]
 80022dc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	689b      	ldr	r3, [r3, #8]
 80022e4:	494d      	ldr	r1, [pc, #308]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80022e6:	4313      	orrs	r3, r2
 80022e8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	f003 0301 	and.w	r3, r3, #1
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d044      	beq.n	8002380 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022f6:	687b      	ldr	r3, [r7, #4]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	2b01      	cmp	r3, #1
 80022fc:	d107      	bne.n	800230e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022fe:	4b47      	ldr	r3, [pc, #284]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002306:	2b00      	cmp	r3, #0
 8002308:	d119      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e07f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	2b02      	cmp	r3, #2
 8002314:	d003      	beq.n	800231e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800231a:	2b03      	cmp	r3, #3
 800231c:	d107      	bne.n	800232e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800231e:	4b3f      	ldr	r3, [pc, #252]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d109      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800232a:	2301      	movs	r3, #1
 800232c:	e06f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800232e:	4b3b      	ldr	r3, [pc, #236]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f003 0302 	and.w	r3, r3, #2
 8002336:	2b00      	cmp	r3, #0
 8002338:	d101      	bne.n	800233e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800233a:	2301      	movs	r3, #1
 800233c:	e067      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800233e:	4b37      	ldr	r3, [pc, #220]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002340:	689b      	ldr	r3, [r3, #8]
 8002342:	f023 0203 	bic.w	r2, r3, #3
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	4934      	ldr	r1, [pc, #208]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 800234c:	4313      	orrs	r3, r2
 800234e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002350:	f7fe fc40 	bl	8000bd4 <HAL_GetTick>
 8002354:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002356:	e00a      	b.n	800236e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002358:	f7fe fc3c 	bl	8000bd4 <HAL_GetTick>
 800235c:	4602      	mov	r2, r0
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	1ad3      	subs	r3, r2, r3
 8002362:	f241 3288 	movw	r2, #5000	; 0x1388
 8002366:	4293      	cmp	r3, r2
 8002368:	d901      	bls.n	800236e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800236a:	2303      	movs	r3, #3
 800236c:	e04f      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800236e:	4b2b      	ldr	r3, [pc, #172]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 8002370:	689b      	ldr	r3, [r3, #8]
 8002372:	f003 020c 	and.w	r2, r3, #12
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	009b      	lsls	r3, r3, #2
 800237c:	429a      	cmp	r2, r3
 800237e:	d1eb      	bne.n	8002358 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002380:	4b25      	ldr	r3, [pc, #148]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 030f 	and.w	r3, r3, #15
 8002388:	683a      	ldr	r2, [r7, #0]
 800238a:	429a      	cmp	r2, r3
 800238c:	d20c      	bcs.n	80023a8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800238e:	4b22      	ldr	r3, [pc, #136]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002390:	683a      	ldr	r2, [r7, #0]
 8002392:	b2d2      	uxtb	r2, r2
 8002394:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002396:	4b20      	ldr	r3, [pc, #128]	; (8002418 <HAL_RCC_ClockConfig+0x1b8>)
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	f003 030f 	and.w	r3, r3, #15
 800239e:	683a      	ldr	r2, [r7, #0]
 80023a0:	429a      	cmp	r2, r3
 80023a2:	d001      	beq.n	80023a8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e032      	b.n	800240e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	f003 0304 	and.w	r3, r3, #4
 80023b0:	2b00      	cmp	r3, #0
 80023b2:	d008      	beq.n	80023c6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80023b4:	4b19      	ldr	r3, [pc, #100]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023b6:	689b      	ldr	r3, [r3, #8]
 80023b8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	68db      	ldr	r3, [r3, #12]
 80023c0:	4916      	ldr	r1, [pc, #88]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023c2:	4313      	orrs	r3, r2
 80023c4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	f003 0308 	and.w	r3, r3, #8
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d009      	beq.n	80023e6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80023d2:	4b12      	ldr	r3, [pc, #72]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	691b      	ldr	r3, [r3, #16]
 80023de:	00db      	lsls	r3, r3, #3
 80023e0:	490e      	ldr	r1, [pc, #56]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023e2:	4313      	orrs	r3, r2
 80023e4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80023e6:	f000 f821 	bl	800242c <HAL_RCC_GetSysClockFreq>
 80023ea:	4602      	mov	r2, r0
 80023ec:	4b0b      	ldr	r3, [pc, #44]	; (800241c <HAL_RCC_ClockConfig+0x1bc>)
 80023ee:	689b      	ldr	r3, [r3, #8]
 80023f0:	091b      	lsrs	r3, r3, #4
 80023f2:	f003 030f 	and.w	r3, r3, #15
 80023f6:	490a      	ldr	r1, [pc, #40]	; (8002420 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	5ccb      	ldrb	r3, [r1, r3]
 80023fa:	fa22 f303 	lsr.w	r3, r2, r3
 80023fe:	4a09      	ldr	r2, [pc, #36]	; (8002424 <HAL_RCC_ClockConfig+0x1c4>)
 8002400:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002402:	4b09      	ldr	r3, [pc, #36]	; (8002428 <HAL_RCC_ClockConfig+0x1c8>)
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	4618      	mov	r0, r3
 8002408:	f7fe fba0 	bl	8000b4c <HAL_InitTick>

  return HAL_OK;
 800240c:	2300      	movs	r3, #0
}
 800240e:	4618      	mov	r0, r3
 8002410:	3710      	adds	r7, #16
 8002412:	46bd      	mov	sp, r7
 8002414:	bd80      	pop	{r7, pc}
 8002416:	bf00      	nop
 8002418:	40023c00 	.word	0x40023c00
 800241c:	40023800 	.word	0x40023800
 8002420:	08002af4 	.word	0x08002af4
 8002424:	20000000 	.word	0x20000000
 8002428:	20000004 	.word	0x20000004

0800242c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800242c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002430:	b084      	sub	sp, #16
 8002432:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002434:	2300      	movs	r3, #0
 8002436:	607b      	str	r3, [r7, #4]
 8002438:	2300      	movs	r3, #0
 800243a:	60fb      	str	r3, [r7, #12]
 800243c:	2300      	movs	r3, #0
 800243e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002440:	2300      	movs	r3, #0
 8002442:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002444:	4b67      	ldr	r3, [pc, #412]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002446:	689b      	ldr	r3, [r3, #8]
 8002448:	f003 030c 	and.w	r3, r3, #12
 800244c:	2b08      	cmp	r3, #8
 800244e:	d00d      	beq.n	800246c <HAL_RCC_GetSysClockFreq+0x40>
 8002450:	2b08      	cmp	r3, #8
 8002452:	f200 80bd 	bhi.w	80025d0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002456:	2b00      	cmp	r3, #0
 8002458:	d002      	beq.n	8002460 <HAL_RCC_GetSysClockFreq+0x34>
 800245a:	2b04      	cmp	r3, #4
 800245c:	d003      	beq.n	8002466 <HAL_RCC_GetSysClockFreq+0x3a>
 800245e:	e0b7      	b.n	80025d0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002460:	4b61      	ldr	r3, [pc, #388]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002462:	60bb      	str	r3, [r7, #8]
       break;
 8002464:	e0b7      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002466:	4b61      	ldr	r3, [pc, #388]	; (80025ec <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002468:	60bb      	str	r3, [r7, #8]
      break;
 800246a:	e0b4      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800246c:	4b5d      	ldr	r3, [pc, #372]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002474:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002476:	4b5b      	ldr	r3, [pc, #364]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002478:	685b      	ldr	r3, [r3, #4]
 800247a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800247e:	2b00      	cmp	r3, #0
 8002480:	d04d      	beq.n	800251e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002482:	4b58      	ldr	r3, [pc, #352]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002484:	685b      	ldr	r3, [r3, #4]
 8002486:	099b      	lsrs	r3, r3, #6
 8002488:	461a      	mov	r2, r3
 800248a:	f04f 0300 	mov.w	r3, #0
 800248e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002492:	f04f 0100 	mov.w	r1, #0
 8002496:	ea02 0800 	and.w	r8, r2, r0
 800249a:	ea03 0901 	and.w	r9, r3, r1
 800249e:	4640      	mov	r0, r8
 80024a0:	4649      	mov	r1, r9
 80024a2:	f04f 0200 	mov.w	r2, #0
 80024a6:	f04f 0300 	mov.w	r3, #0
 80024aa:	014b      	lsls	r3, r1, #5
 80024ac:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80024b0:	0142      	lsls	r2, r0, #5
 80024b2:	4610      	mov	r0, r2
 80024b4:	4619      	mov	r1, r3
 80024b6:	ebb0 0008 	subs.w	r0, r0, r8
 80024ba:	eb61 0109 	sbc.w	r1, r1, r9
 80024be:	f04f 0200 	mov.w	r2, #0
 80024c2:	f04f 0300 	mov.w	r3, #0
 80024c6:	018b      	lsls	r3, r1, #6
 80024c8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80024cc:	0182      	lsls	r2, r0, #6
 80024ce:	1a12      	subs	r2, r2, r0
 80024d0:	eb63 0301 	sbc.w	r3, r3, r1
 80024d4:	f04f 0000 	mov.w	r0, #0
 80024d8:	f04f 0100 	mov.w	r1, #0
 80024dc:	00d9      	lsls	r1, r3, #3
 80024de:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80024e2:	00d0      	lsls	r0, r2, #3
 80024e4:	4602      	mov	r2, r0
 80024e6:	460b      	mov	r3, r1
 80024e8:	eb12 0208 	adds.w	r2, r2, r8
 80024ec:	eb43 0309 	adc.w	r3, r3, r9
 80024f0:	f04f 0000 	mov.w	r0, #0
 80024f4:	f04f 0100 	mov.w	r1, #0
 80024f8:	0259      	lsls	r1, r3, #9
 80024fa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80024fe:	0250      	lsls	r0, r2, #9
 8002500:	4602      	mov	r2, r0
 8002502:	460b      	mov	r3, r1
 8002504:	4610      	mov	r0, r2
 8002506:	4619      	mov	r1, r3
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	461a      	mov	r2, r3
 800250c:	f04f 0300 	mov.w	r3, #0
 8002510:	f7fd fe6c 	bl	80001ec <__aeabi_uldivmod>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4613      	mov	r3, r2
 800251a:	60fb      	str	r3, [r7, #12]
 800251c:	e04a      	b.n	80025b4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800251e:	4b31      	ldr	r3, [pc, #196]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	099b      	lsrs	r3, r3, #6
 8002524:	461a      	mov	r2, r3
 8002526:	f04f 0300 	mov.w	r3, #0
 800252a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800252e:	f04f 0100 	mov.w	r1, #0
 8002532:	ea02 0400 	and.w	r4, r2, r0
 8002536:	ea03 0501 	and.w	r5, r3, r1
 800253a:	4620      	mov	r0, r4
 800253c:	4629      	mov	r1, r5
 800253e:	f04f 0200 	mov.w	r2, #0
 8002542:	f04f 0300 	mov.w	r3, #0
 8002546:	014b      	lsls	r3, r1, #5
 8002548:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800254c:	0142      	lsls	r2, r0, #5
 800254e:	4610      	mov	r0, r2
 8002550:	4619      	mov	r1, r3
 8002552:	1b00      	subs	r0, r0, r4
 8002554:	eb61 0105 	sbc.w	r1, r1, r5
 8002558:	f04f 0200 	mov.w	r2, #0
 800255c:	f04f 0300 	mov.w	r3, #0
 8002560:	018b      	lsls	r3, r1, #6
 8002562:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002566:	0182      	lsls	r2, r0, #6
 8002568:	1a12      	subs	r2, r2, r0
 800256a:	eb63 0301 	sbc.w	r3, r3, r1
 800256e:	f04f 0000 	mov.w	r0, #0
 8002572:	f04f 0100 	mov.w	r1, #0
 8002576:	00d9      	lsls	r1, r3, #3
 8002578:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800257c:	00d0      	lsls	r0, r2, #3
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	1912      	adds	r2, r2, r4
 8002584:	eb45 0303 	adc.w	r3, r5, r3
 8002588:	f04f 0000 	mov.w	r0, #0
 800258c:	f04f 0100 	mov.w	r1, #0
 8002590:	0299      	lsls	r1, r3, #10
 8002592:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002596:	0290      	lsls	r0, r2, #10
 8002598:	4602      	mov	r2, r0
 800259a:	460b      	mov	r3, r1
 800259c:	4610      	mov	r0, r2
 800259e:	4619      	mov	r1, r3
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	461a      	mov	r2, r3
 80025a4:	f04f 0300 	mov.w	r3, #0
 80025a8:	f7fd fe20 	bl	80001ec <__aeabi_uldivmod>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4613      	mov	r3, r2
 80025b2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80025b6:	685b      	ldr	r3, [r3, #4]
 80025b8:	0c1b      	lsrs	r3, r3, #16
 80025ba:	f003 0303 	and.w	r3, r3, #3
 80025be:	3301      	adds	r3, #1
 80025c0:	005b      	lsls	r3, r3, #1
 80025c2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80025cc:	60bb      	str	r3, [r7, #8]
      break;
 80025ce:	e002      	b.n	80025d6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025d0:	4b05      	ldr	r3, [pc, #20]	; (80025e8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80025d2:	60bb      	str	r3, [r7, #8]
      break;
 80025d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025d6:	68bb      	ldr	r3, [r7, #8]
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3710      	adds	r7, #16
 80025dc:	46bd      	mov	sp, r7
 80025de:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80025e2:	bf00      	nop
 80025e4:	40023800 	.word	0x40023800
 80025e8:	00f42400 	.word	0x00f42400
 80025ec:	007a1200 	.word	0x007a1200

080025f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025f4:	4b03      	ldr	r3, [pc, #12]	; (8002604 <HAL_RCC_GetHCLKFreq+0x14>)
 80025f6:	681b      	ldr	r3, [r3, #0]
}
 80025f8:	4618      	mov	r0, r3
 80025fa:	46bd      	mov	sp, r7
 80025fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002600:	4770      	bx	lr
 8002602:	bf00      	nop
 8002604:	20000000 	.word	0x20000000

08002608 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800260c:	f7ff fff0 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002610:	4602      	mov	r2, r0
 8002612:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002614:	689b      	ldr	r3, [r3, #8]
 8002616:	0a9b      	lsrs	r3, r3, #10
 8002618:	f003 0307 	and.w	r3, r3, #7
 800261c:	4903      	ldr	r1, [pc, #12]	; (800262c <HAL_RCC_GetPCLK1Freq+0x24>)
 800261e:	5ccb      	ldrb	r3, [r1, r3]
 8002620:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002624:	4618      	mov	r0, r3
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40023800 	.word	0x40023800
 800262c:	08002b04 	.word	0x08002b04

08002630 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002634:	f7ff ffdc 	bl	80025f0 <HAL_RCC_GetHCLKFreq>
 8002638:	4602      	mov	r2, r0
 800263a:	4b05      	ldr	r3, [pc, #20]	; (8002650 <HAL_RCC_GetPCLK2Freq+0x20>)
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	0b5b      	lsrs	r3, r3, #13
 8002640:	f003 0307 	and.w	r3, r3, #7
 8002644:	4903      	ldr	r1, [pc, #12]	; (8002654 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002646:	5ccb      	ldrb	r3, [r1, r3]
 8002648:	fa22 f303 	lsr.w	r3, r2, r3
}
 800264c:	4618      	mov	r0, r3
 800264e:	bd80      	pop	{r7, pc}
 8002650:	40023800 	.word	0x40023800
 8002654:	08002b04 	.word	0x08002b04

08002658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b082      	sub	sp, #8
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	2b00      	cmp	r3, #0
 8002664:	d101      	bne.n	800266a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002666:	2301      	movs	r3, #1
 8002668:	e03f      	b.n	80026ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002670:	b2db      	uxtb	r3, r3
 8002672:	2b00      	cmp	r3, #0
 8002674:	d106      	bne.n	8002684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	2200      	movs	r2, #0
 800267a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800267e:	6878      	ldr	r0, [r7, #4]
 8002680:	f7fe f98a 	bl	8000998 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2224      	movs	r2, #36	; 0x24
 8002688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	68da      	ldr	r2, [r3, #12]
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800269a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800269c:	6878      	ldr	r0, [r7, #4]
 800269e:	f000 f829 	bl	80026f4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	681b      	ldr	r3, [r3, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80026b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	681b      	ldr	r3, [r3, #0]
 80026b6:	695a      	ldr	r2, [r3, #20]
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	681b      	ldr	r3, [r3, #0]
 80026bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80026c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	681b      	ldr	r3, [r3, #0]
 80026c6:	68da      	ldr	r2, [r3, #12]
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80026d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	2200      	movs	r2, #0
 80026d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	2220      	movs	r2, #32
 80026dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	2220      	movs	r2, #32
 80026e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3708      	adds	r7, #8
 80026ee:	46bd      	mov	sp, r7
 80026f0:	bd80      	pop	{r7, pc}
	...

080026f4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80026f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80026f8:	b09f      	sub	sp, #124	; 0x7c
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80026fe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	691b      	ldr	r3, [r3, #16]
 8002704:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8002708:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270a:	68d9      	ldr	r1, [r3, #12]
 800270c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	ea40 0301 	orr.w	r3, r0, r1
 8002714:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002716:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002718:	689a      	ldr	r2, [r3, #8]
 800271a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800271c:	691b      	ldr	r3, [r3, #16]
 800271e:	431a      	orrs	r2, r3
 8002720:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002722:	695b      	ldr	r3, [r3, #20]
 8002724:	431a      	orrs	r2, r3
 8002726:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002728:	69db      	ldr	r3, [r3, #28]
 800272a:	4313      	orrs	r3, r2
 800272c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 800272e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	68db      	ldr	r3, [r3, #12]
 8002734:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8002738:	f021 010c 	bic.w	r1, r1, #12
 800273c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002742:	430b      	orrs	r3, r1
 8002744:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002746:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	695b      	ldr	r3, [r3, #20]
 800274c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8002750:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002752:	6999      	ldr	r1, [r3, #24]
 8002754:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002756:	681a      	ldr	r2, [r3, #0]
 8002758:	ea40 0301 	orr.w	r3, r0, r1
 800275c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800275e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002760:	681a      	ldr	r2, [r3, #0]
 8002762:	4bc5      	ldr	r3, [pc, #788]	; (8002a78 <UART_SetConfig+0x384>)
 8002764:	429a      	cmp	r2, r3
 8002766:	d004      	beq.n	8002772 <UART_SetConfig+0x7e>
 8002768:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800276a:	681a      	ldr	r2, [r3, #0]
 800276c:	4bc3      	ldr	r3, [pc, #780]	; (8002a7c <UART_SetConfig+0x388>)
 800276e:	429a      	cmp	r2, r3
 8002770:	d103      	bne.n	800277a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8002772:	f7ff ff5d 	bl	8002630 <HAL_RCC_GetPCLK2Freq>
 8002776:	6778      	str	r0, [r7, #116]	; 0x74
 8002778:	e002      	b.n	8002780 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800277a:	f7ff ff45 	bl	8002608 <HAL_RCC_GetPCLK1Freq>
 800277e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8002780:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002782:	69db      	ldr	r3, [r3, #28]
 8002784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002788:	f040 80b6 	bne.w	80028f8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800278c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800278e:	461c      	mov	r4, r3
 8002790:	f04f 0500 	mov.w	r5, #0
 8002794:	4622      	mov	r2, r4
 8002796:	462b      	mov	r3, r5
 8002798:	1891      	adds	r1, r2, r2
 800279a:	6439      	str	r1, [r7, #64]	; 0x40
 800279c:	415b      	adcs	r3, r3
 800279e:	647b      	str	r3, [r7, #68]	; 0x44
 80027a0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80027a4:	1912      	adds	r2, r2, r4
 80027a6:	eb45 0303 	adc.w	r3, r5, r3
 80027aa:	f04f 0000 	mov.w	r0, #0
 80027ae:	f04f 0100 	mov.w	r1, #0
 80027b2:	00d9      	lsls	r1, r3, #3
 80027b4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b8:	00d0      	lsls	r0, r2, #3
 80027ba:	4602      	mov	r2, r0
 80027bc:	460b      	mov	r3, r1
 80027be:	1911      	adds	r1, r2, r4
 80027c0:	6639      	str	r1, [r7, #96]	; 0x60
 80027c2:	416b      	adcs	r3, r5
 80027c4:	667b      	str	r3, [r7, #100]	; 0x64
 80027c6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80027c8:	685b      	ldr	r3, [r3, #4]
 80027ca:	461a      	mov	r2, r3
 80027cc:	f04f 0300 	mov.w	r3, #0
 80027d0:	1891      	adds	r1, r2, r2
 80027d2:	63b9      	str	r1, [r7, #56]	; 0x38
 80027d4:	415b      	adcs	r3, r3
 80027d6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80027d8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80027dc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 80027e0:	f7fd fd04 	bl	80001ec <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4ba5      	ldr	r3, [pc, #660]	; (8002a80 <UART_SetConfig+0x38c>)
 80027ea:	fba3 2302 	umull	r2, r3, r3, r2
 80027ee:	095b      	lsrs	r3, r3, #5
 80027f0:	011e      	lsls	r6, r3, #4
 80027f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80027f4:	461c      	mov	r4, r3
 80027f6:	f04f 0500 	mov.w	r5, #0
 80027fa:	4622      	mov	r2, r4
 80027fc:	462b      	mov	r3, r5
 80027fe:	1891      	adds	r1, r2, r2
 8002800:	6339      	str	r1, [r7, #48]	; 0x30
 8002802:	415b      	adcs	r3, r3
 8002804:	637b      	str	r3, [r7, #52]	; 0x34
 8002806:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800280a:	1912      	adds	r2, r2, r4
 800280c:	eb45 0303 	adc.w	r3, r5, r3
 8002810:	f04f 0000 	mov.w	r0, #0
 8002814:	f04f 0100 	mov.w	r1, #0
 8002818:	00d9      	lsls	r1, r3, #3
 800281a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800281e:	00d0      	lsls	r0, r2, #3
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	1911      	adds	r1, r2, r4
 8002826:	65b9      	str	r1, [r7, #88]	; 0x58
 8002828:	416b      	adcs	r3, r5
 800282a:	65fb      	str	r3, [r7, #92]	; 0x5c
 800282c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800282e:	685b      	ldr	r3, [r3, #4]
 8002830:	461a      	mov	r2, r3
 8002832:	f04f 0300 	mov.w	r3, #0
 8002836:	1891      	adds	r1, r2, r2
 8002838:	62b9      	str	r1, [r7, #40]	; 0x28
 800283a:	415b      	adcs	r3, r3
 800283c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800283e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002842:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8002846:	f7fd fcd1 	bl	80001ec <__aeabi_uldivmod>
 800284a:	4602      	mov	r2, r0
 800284c:	460b      	mov	r3, r1
 800284e:	4b8c      	ldr	r3, [pc, #560]	; (8002a80 <UART_SetConfig+0x38c>)
 8002850:	fba3 1302 	umull	r1, r3, r3, r2
 8002854:	095b      	lsrs	r3, r3, #5
 8002856:	2164      	movs	r1, #100	; 0x64
 8002858:	fb01 f303 	mul.w	r3, r1, r3
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	00db      	lsls	r3, r3, #3
 8002860:	3332      	adds	r3, #50	; 0x32
 8002862:	4a87      	ldr	r2, [pc, #540]	; (8002a80 <UART_SetConfig+0x38c>)
 8002864:	fba2 2303 	umull	r2, r3, r2, r3
 8002868:	095b      	lsrs	r3, r3, #5
 800286a:	005b      	lsls	r3, r3, #1
 800286c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8002870:	441e      	add	r6, r3
 8002872:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002874:	4618      	mov	r0, r3
 8002876:	f04f 0100 	mov.w	r1, #0
 800287a:	4602      	mov	r2, r0
 800287c:	460b      	mov	r3, r1
 800287e:	1894      	adds	r4, r2, r2
 8002880:	623c      	str	r4, [r7, #32]
 8002882:	415b      	adcs	r3, r3
 8002884:	627b      	str	r3, [r7, #36]	; 0x24
 8002886:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800288a:	1812      	adds	r2, r2, r0
 800288c:	eb41 0303 	adc.w	r3, r1, r3
 8002890:	f04f 0400 	mov.w	r4, #0
 8002894:	f04f 0500 	mov.w	r5, #0
 8002898:	00dd      	lsls	r5, r3, #3
 800289a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800289e:	00d4      	lsls	r4, r2, #3
 80028a0:	4622      	mov	r2, r4
 80028a2:	462b      	mov	r3, r5
 80028a4:	1814      	adds	r4, r2, r0
 80028a6:	653c      	str	r4, [r7, #80]	; 0x50
 80028a8:	414b      	adcs	r3, r1
 80028aa:	657b      	str	r3, [r7, #84]	; 0x54
 80028ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	461a      	mov	r2, r3
 80028b2:	f04f 0300 	mov.w	r3, #0
 80028b6:	1891      	adds	r1, r2, r2
 80028b8:	61b9      	str	r1, [r7, #24]
 80028ba:	415b      	adcs	r3, r3
 80028bc:	61fb      	str	r3, [r7, #28]
 80028be:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80028c2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80028c6:	f7fd fc91 	bl	80001ec <__aeabi_uldivmod>
 80028ca:	4602      	mov	r2, r0
 80028cc:	460b      	mov	r3, r1
 80028ce:	4b6c      	ldr	r3, [pc, #432]	; (8002a80 <UART_SetConfig+0x38c>)
 80028d0:	fba3 1302 	umull	r1, r3, r3, r2
 80028d4:	095b      	lsrs	r3, r3, #5
 80028d6:	2164      	movs	r1, #100	; 0x64
 80028d8:	fb01 f303 	mul.w	r3, r1, r3
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	00db      	lsls	r3, r3, #3
 80028e0:	3332      	adds	r3, #50	; 0x32
 80028e2:	4a67      	ldr	r2, [pc, #412]	; (8002a80 <UART_SetConfig+0x38c>)
 80028e4:	fba2 2303 	umull	r2, r3, r2, r3
 80028e8:	095b      	lsrs	r3, r3, #5
 80028ea:	f003 0207 	and.w	r2, r3, #7
 80028ee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4432      	add	r2, r6
 80028f4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80028f6:	e0b9      	b.n	8002a6c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80028f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80028fa:	461c      	mov	r4, r3
 80028fc:	f04f 0500 	mov.w	r5, #0
 8002900:	4622      	mov	r2, r4
 8002902:	462b      	mov	r3, r5
 8002904:	1891      	adds	r1, r2, r2
 8002906:	6139      	str	r1, [r7, #16]
 8002908:	415b      	adcs	r3, r3
 800290a:	617b      	str	r3, [r7, #20]
 800290c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8002910:	1912      	adds	r2, r2, r4
 8002912:	eb45 0303 	adc.w	r3, r5, r3
 8002916:	f04f 0000 	mov.w	r0, #0
 800291a:	f04f 0100 	mov.w	r1, #0
 800291e:	00d9      	lsls	r1, r3, #3
 8002920:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002924:	00d0      	lsls	r0, r2, #3
 8002926:	4602      	mov	r2, r0
 8002928:	460b      	mov	r3, r1
 800292a:	eb12 0804 	adds.w	r8, r2, r4
 800292e:	eb43 0905 	adc.w	r9, r3, r5
 8002932:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	4618      	mov	r0, r3
 8002938:	f04f 0100 	mov.w	r1, #0
 800293c:	f04f 0200 	mov.w	r2, #0
 8002940:	f04f 0300 	mov.w	r3, #0
 8002944:	008b      	lsls	r3, r1, #2
 8002946:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800294a:	0082      	lsls	r2, r0, #2
 800294c:	4640      	mov	r0, r8
 800294e:	4649      	mov	r1, r9
 8002950:	f7fd fc4c 	bl	80001ec <__aeabi_uldivmod>
 8002954:	4602      	mov	r2, r0
 8002956:	460b      	mov	r3, r1
 8002958:	4b49      	ldr	r3, [pc, #292]	; (8002a80 <UART_SetConfig+0x38c>)
 800295a:	fba3 2302 	umull	r2, r3, r3, r2
 800295e:	095b      	lsrs	r3, r3, #5
 8002960:	011e      	lsls	r6, r3, #4
 8002962:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002964:	4618      	mov	r0, r3
 8002966:	f04f 0100 	mov.w	r1, #0
 800296a:	4602      	mov	r2, r0
 800296c:	460b      	mov	r3, r1
 800296e:	1894      	adds	r4, r2, r2
 8002970:	60bc      	str	r4, [r7, #8]
 8002972:	415b      	adcs	r3, r3
 8002974:	60fb      	str	r3, [r7, #12]
 8002976:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800297a:	1812      	adds	r2, r2, r0
 800297c:	eb41 0303 	adc.w	r3, r1, r3
 8002980:	f04f 0400 	mov.w	r4, #0
 8002984:	f04f 0500 	mov.w	r5, #0
 8002988:	00dd      	lsls	r5, r3, #3
 800298a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800298e:	00d4      	lsls	r4, r2, #3
 8002990:	4622      	mov	r2, r4
 8002992:	462b      	mov	r3, r5
 8002994:	1814      	adds	r4, r2, r0
 8002996:	64bc      	str	r4, [r7, #72]	; 0x48
 8002998:	414b      	adcs	r3, r1
 800299a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800299c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4618      	mov	r0, r3
 80029a2:	f04f 0100 	mov.w	r1, #0
 80029a6:	f04f 0200 	mov.w	r2, #0
 80029aa:	f04f 0300 	mov.w	r3, #0
 80029ae:	008b      	lsls	r3, r1, #2
 80029b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80029b4:	0082      	lsls	r2, r0, #2
 80029b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80029ba:	f7fd fc17 	bl	80001ec <__aeabi_uldivmod>
 80029be:	4602      	mov	r2, r0
 80029c0:	460b      	mov	r3, r1
 80029c2:	4b2f      	ldr	r3, [pc, #188]	; (8002a80 <UART_SetConfig+0x38c>)
 80029c4:	fba3 1302 	umull	r1, r3, r3, r2
 80029c8:	095b      	lsrs	r3, r3, #5
 80029ca:	2164      	movs	r1, #100	; 0x64
 80029cc:	fb01 f303 	mul.w	r3, r1, r3
 80029d0:	1ad3      	subs	r3, r2, r3
 80029d2:	011b      	lsls	r3, r3, #4
 80029d4:	3332      	adds	r3, #50	; 0x32
 80029d6:	4a2a      	ldr	r2, [pc, #168]	; (8002a80 <UART_SetConfig+0x38c>)
 80029d8:	fba2 2303 	umull	r2, r3, r2, r3
 80029dc:	095b      	lsrs	r3, r3, #5
 80029de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80029e2:	441e      	add	r6, r3
 80029e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80029e6:	4618      	mov	r0, r3
 80029e8:	f04f 0100 	mov.w	r1, #0
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	1894      	adds	r4, r2, r2
 80029f2:	603c      	str	r4, [r7, #0]
 80029f4:	415b      	adcs	r3, r3
 80029f6:	607b      	str	r3, [r7, #4]
 80029f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80029fc:	1812      	adds	r2, r2, r0
 80029fe:	eb41 0303 	adc.w	r3, r1, r3
 8002a02:	f04f 0400 	mov.w	r4, #0
 8002a06:	f04f 0500 	mov.w	r5, #0
 8002a0a:	00dd      	lsls	r5, r3, #3
 8002a0c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8002a10:	00d4      	lsls	r4, r2, #3
 8002a12:	4622      	mov	r2, r4
 8002a14:	462b      	mov	r3, r5
 8002a16:	eb12 0a00 	adds.w	sl, r2, r0
 8002a1a:	eb43 0b01 	adc.w	fp, r3, r1
 8002a1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a20:	685b      	ldr	r3, [r3, #4]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f04f 0100 	mov.w	r1, #0
 8002a28:	f04f 0200 	mov.w	r2, #0
 8002a2c:	f04f 0300 	mov.w	r3, #0
 8002a30:	008b      	lsls	r3, r1, #2
 8002a32:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8002a36:	0082      	lsls	r2, r0, #2
 8002a38:	4650      	mov	r0, sl
 8002a3a:	4659      	mov	r1, fp
 8002a3c:	f7fd fbd6 	bl	80001ec <__aeabi_uldivmod>
 8002a40:	4602      	mov	r2, r0
 8002a42:	460b      	mov	r3, r1
 8002a44:	4b0e      	ldr	r3, [pc, #56]	; (8002a80 <UART_SetConfig+0x38c>)
 8002a46:	fba3 1302 	umull	r1, r3, r3, r2
 8002a4a:	095b      	lsrs	r3, r3, #5
 8002a4c:	2164      	movs	r1, #100	; 0x64
 8002a4e:	fb01 f303 	mul.w	r3, r1, r3
 8002a52:	1ad3      	subs	r3, r2, r3
 8002a54:	011b      	lsls	r3, r3, #4
 8002a56:	3332      	adds	r3, #50	; 0x32
 8002a58:	4a09      	ldr	r2, [pc, #36]	; (8002a80 <UART_SetConfig+0x38c>)
 8002a5a:	fba2 2303 	umull	r2, r3, r2, r3
 8002a5e:	095b      	lsrs	r3, r3, #5
 8002a60:	f003 020f 	and.w	r2, r3, #15
 8002a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4432      	add	r2, r6
 8002a6a:	609a      	str	r2, [r3, #8]
}
 8002a6c:	bf00      	nop
 8002a6e:	377c      	adds	r7, #124	; 0x7c
 8002a70:	46bd      	mov	sp, r7
 8002a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8002a76:	bf00      	nop
 8002a78:	40011000 	.word	0x40011000
 8002a7c:	40011400 	.word	0x40011400
 8002a80:	51eb851f 	.word	0x51eb851f

08002a84 <__libc_init_array>:
 8002a84:	b570      	push	{r4, r5, r6, lr}
 8002a86:	4d0d      	ldr	r5, [pc, #52]	; (8002abc <__libc_init_array+0x38>)
 8002a88:	4c0d      	ldr	r4, [pc, #52]	; (8002ac0 <__libc_init_array+0x3c>)
 8002a8a:	1b64      	subs	r4, r4, r5
 8002a8c:	10a4      	asrs	r4, r4, #2
 8002a8e:	2600      	movs	r6, #0
 8002a90:	42a6      	cmp	r6, r4
 8002a92:	d109      	bne.n	8002aa8 <__libc_init_array+0x24>
 8002a94:	4d0b      	ldr	r5, [pc, #44]	; (8002ac4 <__libc_init_array+0x40>)
 8002a96:	4c0c      	ldr	r4, [pc, #48]	; (8002ac8 <__libc_init_array+0x44>)
 8002a98:	f000 f820 	bl	8002adc <_init>
 8002a9c:	1b64      	subs	r4, r4, r5
 8002a9e:	10a4      	asrs	r4, r4, #2
 8002aa0:	2600      	movs	r6, #0
 8002aa2:	42a6      	cmp	r6, r4
 8002aa4:	d105      	bne.n	8002ab2 <__libc_init_array+0x2e>
 8002aa6:	bd70      	pop	{r4, r5, r6, pc}
 8002aa8:	f855 3b04 	ldr.w	r3, [r5], #4
 8002aac:	4798      	blx	r3
 8002aae:	3601      	adds	r6, #1
 8002ab0:	e7ee      	b.n	8002a90 <__libc_init_array+0xc>
 8002ab2:	f855 3b04 	ldr.w	r3, [r5], #4
 8002ab6:	4798      	blx	r3
 8002ab8:	3601      	adds	r6, #1
 8002aba:	e7f2      	b.n	8002aa2 <__libc_init_array+0x1e>
 8002abc:	08002b1c 	.word	0x08002b1c
 8002ac0:	08002b1c 	.word	0x08002b1c
 8002ac4:	08002b1c 	.word	0x08002b1c
 8002ac8:	08002b20 	.word	0x08002b20

08002acc <memset>:
 8002acc:	4402      	add	r2, r0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	4293      	cmp	r3, r2
 8002ad2:	d100      	bne.n	8002ad6 <memset+0xa>
 8002ad4:	4770      	bx	lr
 8002ad6:	f803 1b01 	strb.w	r1, [r3], #1
 8002ada:	e7f9      	b.n	8002ad0 <memset+0x4>

08002adc <_init>:
 8002adc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002ade:	bf00      	nop
 8002ae0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002ae2:	bc08      	pop	{r3}
 8002ae4:	469e      	mov	lr, r3
 8002ae6:	4770      	bx	lr

08002ae8 <_fini>:
 8002ae8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002aea:	bf00      	nop
 8002aec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002aee:	bc08      	pop	{r3}
 8002af0:	469e      	mov	lr, r3
 8002af2:	4770      	bx	lr
